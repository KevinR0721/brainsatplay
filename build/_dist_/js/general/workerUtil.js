var n=Object.defineProperty;var a=(t,s,e)=>(typeof s!="symbol"&&(s+=""),s in t?n(t,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[s]=e);export class WorkerUtil{constructor(s=1,e="./js/utils/eegworker.mjs",h=this.onReceivedMsg,o=!1){a(this,"postToWorker",(s,e=null)=>{e===null?(this.workers[this.threadRotation].postMessage(s),this.debug===!0&&console.log("worker: ",this.threadRotation," was sent: ",s),this.threads>1&&(this.threadRotation++,this.threadRotation>=this.threads&&(this.threadRotation=0))):(this.workers[e].postMessage(s),this.debug===!0&&console.log("worker: ",e," was sent: ",s))});a(this,"onReceivedMsg",s=>{console.log(s)});this.workers,this.threads=s,this.threadRotation=0,this.debug=o;try{this.workers=[];for(var r=0;r<this.threads;r++)this.workers.push(new Worker(e)),this.workers[r].onmessage=i=>{var l={idx:r,msg:i.data};this.debug===!0&&console.log(r,": ",l),h(l)};console.log("worker threads: ",this.threads)}catch(i){this.workers=void 0,console.error("Worker error: ",i)}}addWorker(s=this.onReceivedMsg){this.threads++;var e=this.threads-1;this.workers.push(new Worker(workerSrc)),this.workers[e].onmessage=h=>{var o={idx:e,msg:h.data};this.debug===!0&&console.log(e,": ",o),s(o)}}removeWorker(s=null){this.workers.length>0&&(s===null?(this.workers[this.threads-1].terminate(),this.workers.pop()):(this.workers[s].terminate(),this.workers.splice(s,1)))}}
