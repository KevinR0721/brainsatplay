var c=Object.defineProperty;var d=(l,t,e)=>(typeof t!="symbol"&&(t+=""),t in l?c(l,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):l[t]=e);class DataServer{constructor(t=[]){d(this,"subscriptionLoop",()=>{let t=Date.now();this.userSubscriptions.forEach((e,i)=>{if(t-e.lastTransmit>this.subUpdateInterval){let s=this.userData.get(e.listener),r=this.userData.get(e.source);if(s===void 0||r===void 0)this.userSubscriptions.splice(i,1);else if(e.newData===!0){let n={msg:"userData",username:e.source,id:e.id,userData:{}};e.propnames.forEach((a,f)=>{n.userData[a]=r.props[a]}),e.newData=!1,e.lastTransmit=t,s.socket.send(JSON.stringify(n))}}}),this.gameSubscriptions.forEach((e,i)=>{if(t-e.lastTransmit>this.subUpdateInterval){let s={msg:"gameData",appname:e.appname,devices:e.devices,id:e.id,propnames:e.propnames,usernames:e.usernames,spectators:e.spectators,updatedUsers:e.updatedUsers,newUsers:e.newUsers,userData:[]};if(e.updatedUsers.length>0){if(e.updatedUsers.forEach((r,n)=>{if(e.spectators.indexOf(r)<0){let a={username:r},f=this.userData.get(r);e.propnames.forEach((p,g)=>{a[p]=f.props[p]}),s.userData.push(a)}}),e.newUsers.length>0){let r=[...s.userData];e.usernames.forEach((a,f)=>{if(e.updatedUsers.indexOf(a)<0&&e.spectators.indexOf(a)<0){let p={username:a},g=this.userData.get(a);e.propnames.forEach((o,h)=>{p[o]=g.props[o]}),r.push(p)}});let n=Object.assign({},s);n.userData=r,e.newUsers.forEach((a,f)=>{let p=this.userData.get(a);p!==void 0?p.socket.send(JSON.stringify(s)):(e.usernames.splice(e.usernames.indexOf(a),1),e.spectators.indexOf(a)>-1&&e.spectators.splice(e.spectators.indexOf(a),1))}),e.newUsers=[]}e.updatedUsers=[],e.usernames.forEach((r,n)=>{if(e.newUsers.indexOf(r)<0){let a=this.userData.get(r);a!==void 0?(a.socket.send(JSON.stringify(s)),a.lastUpdate=t):(e.usernames.splice(e.usernames.indexOf(r),1),e.spectators.indexOf(r)>-1&&e.spectators.splice(e.spectators.indexOf(r),1))}})}}e.lastTransmit=t}),this.userData.forEach((e,i)=>{t-e.lastUpdate>this.serverTimeout&&(this.userData.socket.close(),this.userData.delete(e.username))}),setTimeout(()=>{this.subscriptionLoop()},10)});this.userData=new Map,this.serverInstances=t,this.userSubscriptions=[],this.gameSubscriptions=[],this.subUpdateInterval=0,this.serverTimeout=60*60*1e3,this.mongodb,this.subscriptionLoop()}addUser(t="",e="",i=null,s=[]){if(i=this.setWSBehavior(t,i),!this.userData.has(t))this.userData.set(t,{username:t,appname:e,socket:i,props:{},lastUpdate:Date.now(),lastTransmit:0,latency:0}),s.forEach((r,n)=>{this.userData.get(t).props[r]=""});else{let r=this.userData.get(t);r.lastUpdate=Date.now(),r.appname=e,i.url!==r.socket.url&&(r.socket.close(),r.socket=i),s.forEach((n,a)=>{r.props[n]=""})}}getUserData(t=""){return this.userData.get(t)}setWSBehavior(t,e){return e!=null&&(e.on("message",i=>{console.log(i),this.processMessage(i)}),e.on("close",i=>{this.removeUser(t)})),e}removeUser(t="username"){this.userData.delete(t)}removeUserToUserStream(t,e,i=null){let s=!1,r=this.userSubscriptions.find((n,a)=>{if(n.listener===t&&n.source===e)return Array.isArray(i)?i.forEach(f=>{let p=n.propnames.indexOf(f);p>-1&&n.propnames.splice(p)}):this.userSubscriptions.splice(a,1),s=!0,!0});return s}removeUserFromGame(t="",e=""){let i=!1,s=this.gameSubscriptions.find((r,n)=>{if(r.id===t){let a=r.usernames.indexOf(e);a>-1&&r.usernames.splice(a,1);let f=r.spectators.indexOf(e);return f>-1&&r.spectators.splice(f,1),i=!0,!0}});return i}removeGameStream(t=""){let e=!1,i=this.gameSubscriptions.find((s,r)=>{if(s.appname===t)return this.gameSubscriptions.splice(r,1),e=!0,!0});return e}processMessage(t=""){let e=JSON.parse(t);if(typeof e=="object"&&!Array.isArray(e)){let i=!1;for(const s in e)if(s==="userData"){i=!0;break}i?this.updateUserData(e):e.username&&e.cmd&&this.processUserCommand(e.username,e.cmd)}else if(Array.isArray(e))this.processUserCommand(e[0],e.slice(1));else if(typeof e=="string"){let i=e.split(" ");this.processUserCommand(i[0],i.slice(1))}}processUserCommand(t="",e=[]){let i=this.userData.get(t);if(i.lastUpdate=Date.now(),e[0]==="getUsers"){let s=[];this.userData.forEach((r,n)=>{e[1]!==void 0?r.username===e[1]&&s.push(r):i.appname!==""&&r.appname===i.appname&&s.push(r.username)}),s.length>0?i.socket.send(JSON.stringify({msg:"getUsersResult",userData:s})):i.socket.send(JSON.stringify({msg:"userNotFound",userData:[t]}))}else if(e[0]==="getUserData"){if(e[2]===void 0){let s=this.getUserData(e[1]);s===void 0?i.socket.send(JSON.stringify({msg:"userNotFound",username:e[1]})):i.socket.send(JSON.stringify({msg:"getUserDataResult",username:e[1],props:s.props}))}else if(Array.isArray(e[2])){let s=this.getUserData(e[1]).props,r={msg:"getUserDataResult",username:e[1],props:{}};s===void 0?i.socket.send(JSON.stringify({msg:"userNotFound",username:e[1]})):(e[2].forEach(n=>{update[props][n]=s.props[n]}),i.socket.send(JSON.stringify(r)))}}else if(e[0]==="createGame")this.createGameSubscription(e[1],e[2],e[3]),i.socket.send(JSON.stringify({msg:"gameCreated",appname:e[1],gameInfo:this.gameSubscriptions[this.gameSubscriptions.length-1]}));else if(e[0]==="getGames"){let s=this.getGameSubscriptions(e[1]);s===void 0?i.socket.send(JSON.stringify({msg:"gameNotFound",appname:e[1]})):i.socket.send(JSON.stringify({msg:"getGamesResult",appname:e[1],gameInfo:s}))}else if(e[0]==="getGameInfo"){let s=this.getGameSubscription(e[1]);s===void 0?i.socket.send(JSON.stringify({msg:"gameNotFound",appname:e[1]})):i.socket.send(JSON.stringify({msg:"getGameInfoResult",appname:e[1],gameInfo:s}))}else if(e[0]==="getGameData"){let s=this.getGameData(e[1]);s===void 0?i.socket.send(JSON.stringify({msg:"gameNotFound",appname:e[1]})):i.socket.send(JSON.stringify({msg:"getGameDataResult",appname:e[1],gameData:s}))}else if(e[0]==="subscribeToUser")command[2]?this.streamBetweenUsers(t,e[1],e[2]):this.streamBetweenUsers(t,e[1]);else if(e[0]==="subscribeToGame")this.subscribeUserToGame(t,e[1],e[2],command[3]);else if(e[0]==="unsubscribeFromUser"){let s;e[2]?s=this.removeUserToUserStream(t,e[1],e[2]):s=this.removeUserToUserStream(t,e[1]),s?i.socket.send(JSON.stringify({msg:"unsubscribed",username:e[1],props:e[2]})):i.socket.send(JSON.stringify({msg:"userNotFound"}))}else if(e[0]==="logout")i.socket.send(JSON.stringify({msg:"logged out"})),i.socket.close(),this.userData.delete(t);else if(e[0]==="leaveGame"){let s;e[2]?s=this.removeUserFromGame(e[1],e[2]):s=this.removeUserFromGame(e[1],i.username),s?i.socket.send(JSON.stringify({msg:"leftGame",appname:e[1]})):i.socket.send(JSON.stringify({msg:"gameNotFound",appname:e[1]}))}else e[0]==="deleteGame"?this.removeGameStream(e[1])?i.socket.send(JSON.stringify({msg:"gameDeleted",appname:e[1]})):i.socket.send(JSON.stringify({msg:"gameNotFound"})):(e[0]==="ping"||e==="ping")&&i.socket.send(JSON.stringify({msg:"pong"}))}updateUserData(t={username:"",userData:{}}){if(this.userData.has(t.username)){let e=this.userData.get(t.username);for(const s in t.userData)e.props[s]=t[s];let i=Date.now();e.latency=i-e.lastUpdate,e.lastUpdate=i,this.userSubscriptions.forEach((s,r)=>{s.source===t.username&&(s.newData=!0)}),this.gameSubscriptions.forEach((s,r)=>{s.usernames.indexOf(t.username)>-1&&s.updatedUsers.indexOf(t.username)<0&&s.spectators.indexOf(t.username)<0&&s.updatedUsers.push(t.username)})}}streamBetweenUsers(t,e,i=[]){if(this.userSubscriptions.find((r,n)=>{r.listener===t&&r.source===e&&(r.propnames=i)})===void 0){let r=this.userData.get(e);if(i.length===0)for(const n in r.props)i.push(n);u=this.userData.get(t),u!==void 0&&r!==void 0?(this.userSubscriptions.push({listener:t,source:e,id:e+"_"+Math.floor(Math.random()*1e7),propnames:i,newData:!1,lastTransmit:0}),u.socket.send(JSON.stringify({msg:"subscribedToUser",sub:this.userSubscriptions[this.userSubscriptions.length-1]}))):u.socket.send(JSON.stringify({msg:"userNotFound",username:e}))}}createGameSubscription(t="",e=[],i=[]){this.gameSubscriptions.push({appname:t,devices:e,id:t+"_"+Math.floor(Math.random()*1e7),usernames:[],updatedUsers:[],newUsers:[],spectators:[],propnames:i,lastTransmit:Date.now()})}getGameSubscriptions(t=""){let e=this.gameSubscriptions.filter(i=>{if(i.appname===t)return!0});if(e.length!==0)return e}getGameSubscription(t=""){return this.gameSubscriptions.find((i,s)=>{if(i.id===t)return!0})}getGameData(t=""){let e,i=this.gameSubscriptions.find((s,r)=>{if(s.id===t){let n={msg:"gameData",appname:s.appname,devices:s.devices,id:s.id,propnames:s.propnames,usernames:s.usernames,updatedUsers:s.updatedUsers,newUsers:s.newUsers,userData:[],spectators:[]};return s.usernames.forEach((a,f)=>{if(s.spectators.indexOf(a)<-1){let p={username:a},g=this.userData.get(a);s.propnames.forEach((o,h)=>{p[o]=g.props[o]}),n.userData.push(p)}else spectators.push(a)}),e=n,!0}});return e}subscribeUserToGame(t,e,i=!1){let s=this.getGameSubscription(e),r=this.userData.get(t);s!==void 0&&r!==void 0?(s.usernames.indexOf(t)<0&&(s.usernames.push(t),i===!0&&s.spectators.push(t),s.newUsers.push(t)),s.propnames.forEach((n,a)=>{n in r.props||(r.props[n]="")}),r.socket.send(JSON.stringify({msg:"subscribedToGame",appname,devices:s.devices,propnames:s.propnames}))):r.socket.send(JSON.stringify({msg:"gameNotFound",appname}))}}module.exports=DataServer;
