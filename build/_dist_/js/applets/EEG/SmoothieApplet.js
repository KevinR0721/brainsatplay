var f=Object.defineProperty;var d=(r,t,s)=>(typeof t!="symbol"&&(t+=""),t in r?f(r,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):r[t]=s);import{brainsatplay as v}from"../../brainsatplay.js";import{DOMFragment as y}from"../../frontend/utils/DOMFragment.js";import{addChannelOptions as m}from"../../frontend/menus/selectTemplates.js";import{SmoothieChartMaker as b}from"../../bciutils/visuals/eegvisuals.js";export class SmoothieApplet{constructor(t=document.body,s=new v,e=[]){d(this,"stopEvent",()=>{this.class.chart.stop()});d(this,"startEvent",()=>{this.class.chart.start()});d(this,"updateLoop",()=>{this.looping&&(this.bci.atlas.settings.eeg&&this.bci.atlas.getLatestFFTData()[0].fftCount>0&&this.onUpdate(),setTimeout(()=>{this.loop=requestAnimationFrame(this.updateLoop)},16))});d(this,"onUpdate",()=>{let t=this.bci.atlas,s=t.data.eegshared.eegChannelTags;var e=document.getElementById(this.props.id+"mode").value;if(e==="alpha"||e==="bandpowers"){if(s.length>this.class.series.length)for(;s.length>this.class.series.length;){var n=new TimeSeries;this.series.push(n);var a=Math.random()*255,l=Math.random()*255,g=Math.random()*255;stroke="rgb("+a+","+l+","+g+")",fill="rgba("+a+","+l+","+g+",0.2)",this.seriesColors.push(stroke),this.chart.addTimeSeries(this.series[this.series.length-1],{strokeStyle:stroke,fillStyle:fill,lineWidth:2})}if(e==="alpha")s.forEach((h,o)=>{if(h.tag!==null&&h.tag!=="other"){var c={};c=t.getEEGDataByTag(h.tag),o<this.class.series.length-1&&this.class.series[o].append(Date.now(),Math.max(...c.slices.alpha1[c.slices.alpha1.length-1]))}});else if(e==="bandpowers"){var u=parseInt(document.getElementById(this.props.id+"channel").value),p=null;if(s.find((h,o)=>{if(h.ch===u)return p=h.tag,!0}),p!==null){var i=t.getEEGDataByTag(p);this.class.bulkAppend([i.means.delta[i.means.delta.length-1],i.means.theta[i.means.theta.length-1],i.means.alpha1[i.means.alpha1.length-1],i.means.alpha2[i.means.alpha2.length-1],i.means.beta[i.means.beta.length-1],i.means.lowgamma[i.means.lowgamma.length-1]])}}}else e==="coherence"&&t.data.coherence.forEach((h,o)=>{o<this.class.series.length-1&&this.class.series[o].append(Date.now(),Math.max(...h.slices.alpha1[h.slices.alpha1.length-1]))})});d(this,"setLegend",()=>{let t=this.bci.atlas,s=t.data.eegshared.eegChannelTags,e=document.getElementById(this.props.id+"mode").value;document.getElementById(this.props.id+"legend").innerHTML="";let n="";if(e==="alpha")s.forEach((a,l)=>{a.tag!==null&&a.tag!=="other"&&(n+="<div style='display:table-row; color:"+this.class.seriesColors[l]+"'>"+a.tag+"</div>")});else if(e==="coherence")t.data.coherence.forEach((a,l)=>{n+="<div style='display:table-row; color:"+this.class.seriesColors[l]+"'>"+a.tag+"</div>"});else if(e==="bandpowers"){let a=0;for(const l in t.data.eeg[0].means)l!=="scp"&&l!=="highgamma"&&(n+="<div style='display:table-row; color:"+this.class.seriesColors[a]+"'>"+l+"</div>",a++)}document.getElementById(this.props.id+"legend").innerHTML=n});this.bci=s,this.parentNode=t,this.settings=e,this.AppletHTML=null,this.props={id:String(Math.floor(Math.random()*1e6)),width:"400px",height:"300px"},this.class=null,this.loop=null,this.looping=!1}init(){let t=(e=this.props)=>`
            <div id='`+e.id+`'>
                <table id='`+e.id+`menu' style='position:absolute; z-index:4; color:white;'>
                <tr>
                <td>
                    Mode:
                    <select id='`+e.id+`mode'>
                    <option value="alpha" selected="selected">Alpha1 Bandpowers</option>
                    <option value="coherence">Alpha1 Coherence</option>
                    <option value="bandpowers">1Ch All Bandpowers</option>
                    </select>
                </td><td id='`+e.id+`channelmenu'>  
                    Channel:
                    <select id='`+e.id+`channel'>
                        <option value="0">0</option>
                    </select>
                </td>
                    </tr>
                    <tr>
                    <td colSpan=2 style='display:table-row;' id='`+e.id+`legend'>
                    </td>
                    </tr>
                </table>
                <canvas id='`+e.id+`canvas' width='100%' height='100%' style='z-index:3; width:100%; height:100%;'></canvas>
            </div>
            `,s=(e=this.props)=>{m(this.props.id+"channel",this.bci.atlas.data.eegshared.eegChannelTags,!0),document.getElementById(e.id+"channelmenu").style.display="none",document.getElementById(e.id+"mode").onchange=()=>{this.class.series.forEach((a,l)=>{a.clear()});let n=document.getElementById(e.id+"mode").value;n==="alpha"||n==="coherence"?document.getElementById(e.id+"channelmenu").style.display="none":n==="bandpowers"&&(document.getElementById(e.id+"channelmenu").style.display="",document.getElementById(e.id+"legend").innerHTML=""),this.setLegend()}};this.AppletHTML=new y(t,this.parentNode,this.props,s,void 0,"NEVER"),this.settings.length>0&&this.configure(this.settings),this.class=new b(8,document.getElementById(this.props.id+"canvas")),this.class.init("rgba(0,100,100,0.5)"),this.setLegend(),this.looping=!0,this.updateLoop()}deinit(){this.looping=!1,this.class.deInit(),this.class=null,this.AppletHTML.deleteNode()}responsive(){this.bci.atlas.settings.eeg&&(m(this.props.id+"channel",this.bci.atlas.data.eegshared.eegChannelTags,!0),this.setLegend())}configure(t=[]){t.forEach((s,e)=>{})}}d(SmoothieApplet,"devices",["eeg"]);
