var g=Object.defineProperty;var h=(l,t,i)=>(typeof t!="symbol"&&(t+=""),t in l?g(l,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):l[t]=i);import{brainsatplay as p}from"../../brainsatplay.js";import{DOMFragment as u}from"../../frontend/utils/DOMFragment.js";import{addChannelOptions as d,addCoherenceOptions as o}from"../../frontend/menus/selectTemplates.js";import{Spectrogram as m}from"../../bciutils/visuals/eegvisuals.js";export class SpectrogramApplet{constructor(t=document.body,i=new p,e=[]){h(this,"updateLoop",()=>{this.looping&&(this.bci.atlas.settings.eeg&&this.bci.atlas.getLatestFFTData()[0].fftCount>0&&this.onUpdate(),setTimeout(()=>{this.loop=requestAnimationFrame(this.updateLoop)}))});h(this,"onUpdate",()=>{let t=this.bci.atlas;var i=document.getElementById(this.props.id+"mode").value,e=document.getElementById(this.props.id+"channel").value,a=parseInt(e);i==="FFT"?t.data.eegshared.eegChannelTags.find((n,c)=>{if(n.ch===a){let r=n.tag;var s=t.getEEGDataByTag(r);return s.ffts.length>1&&(this.class.latestData=[...s.ffts[s.ffts.length-1]],this.class.draw()),!0}}):i==="Coherence"&&t.data.coherence.find((n,c)=>{if(n.tag===e){let s=n;return s.ffts.length>1&&(this.class.latestData=[...s.ffts[s.ffts.length-1]],this.class.draw()),!0}})});this.bci=i,this.parentNode=t,this.settings=e,this.AppletHTML=null,this.props={id:String(Math.floor(Math.random()*1e6)),width:"800px",height:"600px"},this.class=null,this.loop=null,this.looping=!1}init(){let t=(e=this.props)=>`
            <div id='`+e.id+`'>
                <div id='`+e.id+`menu' style='position:absolute; z-index:4; color: white;'> 
                    Mode
                    <select id='`+e.id+`mode'>
                        <option value="FFT" selected="selected">FFT</option>
                        <option value="Coherence">Coherence</option>
                    </select>
                    Channel
                    <select id='`+e.id+`channel'>
                        <option value="0" selected="selected">0</option>
                    </select>
                </div>
                <canvas id='`+e.id+`canvas' height='100%' width='100%' style='z-index:3; width:100%; height:100%;'></canvas>
            </div>
            `,i=(e=this.props)=>{let a=this.bci.atlas.data;d(e.id+"channel",a.eegshared.eegChannelTags),document.getElementById(e.id+"channel").onchange=()=>{this.class.clear()},document.getElementById(e.id+"mode").onchange=()=>{this.class.clear(),document.getElementById(e.id+"mode").value==="FFT"?d(e.id+"channel",a.eegshared.eegChannelTags):document.getElementById(e.id+"mode").value==="Coherence"&&o(e.id+"channel",a.coherence)}};this.AppletHTML=new u(t,this.parentNode,this.props,i,void 0,"NEVER"),this.settings.length>0&&this.configure(this.settings),this.class=new m(this.props.id+"canvas",1e4),this.class.init(),this.looping=!0,this.updateLoop()}deinit(){this.looping=!1,this.class.deInit(),this.class=null,this.AppletHTML.deleteNode()}responsive(){let t=this.bci.atlas.data;this.bci.atlas.settings.eeg&&(document.getElementById(this.props.id+"mode").value==="FFT"?d(this.props.id+"channel",t.eegshared.eegChannelTags):document.getElementById(this.props.id+"mode").value==="Coherence"&&o(this.props.id+"channel",t.coherence)),this.class.canvas.width=this.AppletHTML.node.clientWidth*2,this.class.canvas.height=this.AppletHTML.node.clientHeight*5,this.class.canvas.style.width=this.AppletHTML.node.clientWidth,this.class.canvas.style.height=this.AppletHTML.node.clientHeight,this.class.init()}configure(t=[]){t.forEach((i,e)=>{})}}h(SpectrogramApplet,"devices",["eeg"]);
