var G=Object.defineProperty;var k=(w,i,c)=>(typeof i!="symbol"&&(i+=""),i in w?G(w,i,{enumerable:!0,configurable:!0,writable:!0,value:c}):w[i]=c);import{brainsatplay as _}from"../../../../brainsatplay.js";import{DOMFragment as U}from"../../../../frontend/utils/DOMFragment.js";import*as t from"../../../../../../_snowpack/pkg/three.js";import{OrbitControls as D}from"../../../../../../_snowpack/pkg/three/examples/jsm/controls/OrbitControls.js";import"../../../../../../_snowpack/pkg/three/examples/jsm/libs/stats.module.js";import I from"./shaders/cosmos/vertex.js";import N from"./shaders/cosmos/fragment.js";import{EffectComposer as O}from"../../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/EffectComposer.js";import{RenderPass as q}from"../../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/RenderPass.js";import"../../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/ShaderPass.js";import{SMAAPass as $}from"../../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/SMAAPass.js";import"../../../../../../_snowpack/pkg/three/examples/jsm/shaders/RGBShiftShader.js";import"../../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/UnrealBloomPass.js";import{gsap as V}from"../../../../../../_snowpack/pkg/gsap.js";import"../../../../../../_snowpack/pkg/three/examples/jsm/libs/dat.gui.module.js";import X from"./img/dummyTexture.jpeg.proxy.js";export class CosmosApplet{constructor(i=document.body,c=new _,f=[]){this.parentNode=i,this.settings=f,this.bci=c,this.AppletHTML=null,this.props={id:String(Math.floor(Math.random()*1e6))}}init(){let i=(s=this.props)=>`
            <div id='${s.id}' class="brainsatplay-threejs-wrapper" style='height:${s.height}; width:${s.width};'>
                <div class="brainsatplay-threejs-renderer-container"><canvas class="brainsatplay-threejs-webgl"></canvas></div>
                <div class="brainsatplay-threejs-gui-container"></div>
                <div class="brainsatplay-threejs-gameHero brainsatplay-threejs-container">
                    <div>
                        <p>Alpha Coherence: <span class="brainsatplay-threejs-alphacoherence"></span></p>
                    </div>
                </div>
            </div>
            `,c=(s=this.props)=>{document.getElementById(s.id)};this.AppletHTML=new U(i,this.parentNode,this.props,c,void 0,"NEVER"),this.settings.length>0&&this.configure(this.settings);const f=new t.LoadingManager(()=>{V.delayedCall(.1,()=>{v.style.opacity="1",this.resizeCosmos()})},(s,o,n)=>{});new t.TextureLoader(f).load(X);const r=document.getElementById(this.props.id),v=r.querySelector("canvas.brainsatplay-threejs-webgl"),b=new t.Scene,e={};e.count=2e5,e.size=.005,e.radius=5,e.branches=3,e.spin=1,e.randomness=.2,e.randomnessPower=3,e.insideColor="#ff6030",e.outsideColor="#1b3984";let m=null,M=null,j=null;const T=()=>{j!==null&&(m.dispose(),M.dispose(),b.remove(j)),m=new t.BufferGeometry;const s=new Float32Array(e.count*3),o=new Float32Array(e.count*3),n=new Float32Array(e.count*3),g=new Float32Array(e.count*1),R=new t.Color(e.insideColor),C=new t.Color(e.outsideColor);for(let h=0;h<e.count;h++){const l=h*3,u=Math.random()*e.radius,S=h%e.branches/e.branches*Math.PI*2,W=Math.pow(Math.random(),e.randomnessPower)*(Math.random()<.5?1:-1)*e.randomness*u,z=Math.pow(Math.random(),e.randomnessPower)*(Math.random()<.5?1:-1)*e.randomness*u,E=Math.pow(Math.random(),e.randomnessPower)*(Math.random()<.5?1:-1)*e.randomness*u;s[l]=Math.cos(S)*u,s[l+1]=0,s[l+2]=Math.sin(S)*u,o[l]=W,o[l+1]=z,o[l+2]=E;const x=R.clone();x.lerp(C,u/e.radius),n[l]=x.r,n[l+1]=x.g,n[l+2]=x.b,g[h]=Math.random()}m.setAttribute("position",new t.BufferAttribute(s,3)),m.setAttribute("aRandomness",new t.BufferAttribute(o,3)),m.setAttribute("color",new t.BufferAttribute(n,3)),m.setAttribute("aScale",new t.BufferAttribute(g,1)),M=new t.ShaderMaterial({depthWrite:!1,blending:t.AdditiveBlending,vertexColors:!0,uniforms:{uTime:{value:0},uSize:{value:30*a.getPixelRatio()}},vertexShader:I,fragmentShader:N}),j=new t.Points(m,M),b.add(j)};this.resizeCosmos=()=>{d.aspect=window.innerWidth/window.innerHeight,d.updateProjectionMatrix(),a.setSize(r.clientWidth,r.clientHeight),a.setPixelRatio(Math.min(window.devicePixelRatio,2)),p.setPixelRatio(Math.min(window.devicePixelRatio,2)),p.setSize(r.clientWidth,r.clientHeight)},window.addEventListener("resize",()=>{this.resizeCosmos()});const d=new t.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,100);d.position.x=3,d.position.y=3,d.position.z=3,b.add(d);const y=new D(d,v);y.enableDamping=!0,y.enabled=!1;const a=new t.WebGLRenderer({canvas:v});a.setSize(r.clientWidth,r.clientHeight),a.setPixelRatio(Math.min(window.devicePixelRatio,2));let P=null;a.getPixelRatio()===1&&a.capabilities.isWebGL2?P=t.WebGLMultisampleRenderTarget:P=t.WebGLRenderTarget;const L=new P(window.innerWidth,window.innerHeight,{minFilter:t.LinearFilter,maxFilter:t.LinearFilter,format:t.RGBAFormat,encoding:t.sRGBEncoding,type:t.HalfFloatType}),p=new O(a,L);p.setPixelRatio(Math.min(window.devicePixelRatio,2)),p.setSize(r.clientWidth,r.clientHeight);const B=new q(b,d);if(p.addPass(B),a.getPixelRatio()===1&&!a.capabilities.isWebGL2){const s=new $;p.addPass(s),console.log("Using SMAA")}T();const H=(s="alpha1")=>{let o=null;if(this.bci.atlas.settings.coherence){let n=this.bci.atlas.data.coherence[0].means[s];if(n.length>0){let g=Math.min(20,n.length);o=n.slice(n.length-g).reduce((C,h)=>C+h)/g}}return o!=null?o:.5+Math.sin(Date.now()/1e3)/2},F=new t.Clock,A=()=>{const s=F.getElapsedTime();setTimeout(function(){requestAnimationFrame(A)},1e3/60);let o=H();M.uniforms.uTime.value+=.001+.01*o;let n=r.querySelector(".brainsatplay-threejs-alphacoherence");n&&(n.innerHTML=o.toFixed(5)),y.update(),p.render()};A()}deinit(){this.AppletHTML.deleteNode()}responsive(){this.resizeCosmos()}configure(i=[]){i.forEach((c,f)=>{})}}k(CosmosApplet,"devices",["eeg"]);
