var _=Object.defineProperty;var x=(m,s,p)=>(typeof s!="symbol"&&(s+=""),s in m?_(m,s,{enumerable:!0,configurable:!0,writable:!0,value:p}):m[s]=p);import{brainsatplay as A}from"../../../../brainsatplay.js";import{DOMFragment as E}from"../../../../frontend/utils/DOMFragment.js";import*as t from"../../../../../../_snowpack/pkg/three.js";import{OrbitControls as W}from"../../../../../../_snowpack/pkg/three/examples/jsm/controls/OrbitControls.js";import"../../../../../../_snowpack/pkg/three/examples/jsm/libs/stats.module.js";import B from"./shaders/blob/vertex.js";import F from"./shaders/blob/fragment.js";import{EffectComposer as z}from"../../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/EffectComposer.js";import{RenderPass as I}from"../../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/RenderPass.js";import"../../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/GlitchPass.js";import"../../../../../../_snowpack/pkg/three/examples/jsm/shaders/RGBShiftShader.js";import"../../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/ShaderPass.js";import{SMAAPass as N}from"../../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/SMAAPass.js";import"../../../../../../_snowpack/pkg/three/examples/jsm/shaders/SobelOperatorShader.js";import{UnrealBloomPass as D}from"../../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/UnrealBloomPass.js";import{gsap as O}from"../../../../../../_snowpack/pkg/gsap.js";import"../../../../../../_snowpack/pkg/three/examples/jsm/libs/dat.gui.module.js";import U from"./img/dummyTexture.jpeg.proxy.js";export class BlobApplet{constructor(s=document.body,p=new A,c=[]){this.parentNode=s,this.settings=c,this.bci=p,this.AppletHTML=null,this.props={id:String(Math.floor(Math.random()*1e6))}}init(){let s=(e=this.props)=>`
            <div id='${e.id}' class="brainsatplay-threejs-wrapper" style='height:${e.height}; width:${e.width};'>
                <div class="brainsatplay-threejs-renderer-container"><canvas class="brainsatplay-threejs-webgl"></canvas></div>
                <div class="brainsatplay-threejs-gui-container"></div>
                <div class="brainsatplay-threejs-gameHero brainsatplay-threejs-container">
                    <div>
                        <p>Alpha Coherence: <span class="brainsatplay-threejs-alphacoherence"></span></p>
                    </div>
                </div>
            </div>
            `,p=(e=this.props)=>{document.getElementById(e.id)};this.AppletHTML=new E(s,this.parentNode,this.props,p,void 0,"NEVER"),this.settings.length>0&&this.configure(this.settings);const c=new t.LoadingManager(()=>{O.delayedCall(.1,()=>{b.style.opacity="1",this.resizeMesh()})},(e,l,h)=>{}),$=new t.TextureLoader(c).load(U),i=document.getElementById(this.props.id);let b=i.querySelector("canvas.brainsatplay-threejs-webgl");const j=new t.Scene,n=new t.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.01,1e3);n.position.z=20;let S=n.position.z*n.getFilmHeight()/n.getFocalLength();const r=new t.WebGLRenderer({canvas:b,alpha:!0});r.setSize(i.clientWidth,i.clientHeight),r.setPixelRatio(Math.min(window.devicePixelRatio,2)),i.querySelector(".brainsatplay-threejs-renderer-container").appendChild(r.domElement);let w=null;r.getPixelRatio()===1&&r.capabilities.isWebGL2?w=t.WebGLMultisampleRenderTarget:w=t.WebGLRenderTarget;const M=new w(window.innerWidth,window.innerHeight,{minFilter:t.LinearFilter,maxFilter:t.LinearFilter,format:t.RGBAFormat,encoding:t.sRGBEncoding,type:t.HalfFloatType}),o=new z(r,M);o.setPixelRatio(Math.min(window.devicePixelRatio,2)),o.setSize(i.clientWidth,i.clientHeight);const k=new I(j,n);o.addPass(k);const u=new D;if(u.enabled=!0,u.radius=1,o.addPass(u),r.getPixelRatio()===1&&!r.capabilities.isWebGL2){const e=new N;o.addPass(e),console.log("Using SMAA")}const g=new W(n,r.domElement);g.screenSpacePanning=!0,g.enableDamping=!0,g.enabled=!1;const R=y();let L=Date.now();var a=new function(){this.rPower=0,this.gPower=.85,this.bPower=1,this.alpha=1,this.noiseIntensity=.5,this.updateColor=function(){d.uniforms.uColor.value=[a.rPower,a.gPower,a.bPower,a.alpha]},this.updateNoise=function(){d.uniforms.uNoiseIntensity.value=a.noiseIntensity}};const d=new t.ShaderMaterial({vertexShader:B,fragmentShader:F,transparent:!0,blending:t.AdditiveBlending,uniforms:{uTime:{value:0},aspectRatio:{value:window.innerWidth/window.innerHeight},uColor:{value:[a.rPower,a.gPower,a.bPower,a.alpha]},uNoiseIntensity:{value:a.noiseIntensity}}}),f=new t.Mesh(R,d);j.add(f),this.resizeMesh=()=>{n.aspect=window.innerWidth/window.innerHeight,n.updateProjectionMatrix(),T(),r.setSize(i.clientWidth,i.clientHeight),r.setPixelRatio(Math.min(window.devicePixelRatio,2)),o.setPixelRatio(Math.min(window.devicePixelRatio,2)),o.setSize(i.clientWidth,i.clientHeight)},window.addEventListener("resize",this.resizeMesh,!1);function y(){let e=(S-1)*n.aspect/8;return new t.SphereGeometry(e,Math.pow(2,6),Math.pow(2,6))}function T(){let e=y();f.geometry.dispose(),f.geometry=e}const H=(e="alpha1")=>{let l=null;if(this.bci.atlas.settings.coherence){let h=this.bci.atlas.data.coherence[0].means[e];if(h.length>0){let P=Math.min(20,h.length);l=h.slice(h.length-P).reduce((C,G)=>C+G)/P}}return l!=null?l:.5+Math.sin(Date.now()/1e3)/2};var v=()=>{setTimeout(function(){requestAnimationFrame(v)},1e3/60),d.uniforms.uTime.value=Date.now()-L;let e=H();d.uniforms.uNoiseIntensity.value=1-e;let l=i.querySelector(".brainsatplay-threejs-alphacoherence");l&&(l.innerHTML=e.toFixed(5)),g.update(),o.render()};v()}deinit(){this.AppletHTML.deleteNode()}responsive(){this.resizeMesh()}configure(s=[]){s.forEach((p,c)=>{})}}x(BlobApplet,"devices",["eeg"]);
