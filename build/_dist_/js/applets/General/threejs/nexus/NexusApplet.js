var ce=Object.defineProperty;var I=(k,h,y)=>(typeof h!="symbol"&&(h+=""),h in k?ce(k,h,{enumerable:!0,configurable:!0,writable:!0,value:y}):k[h]=y);import{brainsatplay as me}from"../../../../brainsatplay.js";import{DOMFragment as de}from"../../../../frontend/utils/DOMFragment.js";import*as t from"../../../../../../_snowpack/pkg/three.js";import{UserMarker as C}from"./UserMarker.js";import{OrbitControls as he}from"../../../../../../_snowpack/pkg/three/examples/jsm/controls/OrbitControls.js";import"../../../../../../_snowpack/pkg/three/examples/jsm/libs/stats.module.js";import pe from"./shaders/map/vertex.js";import ge from"./shaders/map/fragment.js";import{EffectComposer as ue}from"../../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/EffectComposer.js";import{RenderPass as fe}from"../../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/RenderPass.js";import{GlitchPass as we}from"./postprocessing/CustomGlitchPass.js";import{RGBShiftShader as ye}from"../../../../../../_snowpack/pkg/three/examples/jsm/shaders/RGBShiftShader.js";import{ShaderPass as xe}from"../../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/ShaderPass.js";import{SMAAPass as ve}from"../../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/SMAAPass.js";import{UnrealBloomPass as be}from"../../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/UnrealBloomPass.js";import{gsap as z}from"../../../../../../_snowpack/pkg/gsap.js";import Me from"./img/mapTexture.jpeg.proxy.js";import je from"./img/mapDisplacement.jpeg.proxy.js";export class NexusApplet{constructor(h=document.body,y=new me,P=[]){this.parentNode=h,this.settings=P,this.bci=y,this.AppletHTML=null,this.props={id:String(Math.floor(Math.random()*1e6))}}init(){let h=(e=this.props)=>`
            <div id='${e.id}' class="wrapper" style='height:${e.height}; width:${e.width};'>
                <div class="nexus-renderer-container"><canvas class="nexus-webgl"></canvas></div>
                <div class="nexus-loading-bar"></div>
                <div class="nexus-point-container"></div>
                <div class="nexus-gameHero nexus-container">
                <div>
                <h1>Nexus</h1>
                <p>Neurofeedback + Group Meditation</p>
                </div></div>
            </div>
            `,y=(e=this.props)=>{document.getElementById(e.id)};this.AppletHTML=new de(h,this.parentNode,this.props,y,void 0,"NEVER"),this.settings.length>0&&this.configure(this.settings);const P=new t.Raycaster,G=document.querySelector(".nexus-loading-bar"),Y=new t.LoadingManager(()=>{l.setSize(n.clientWidth,n.clientHeight),H.style.display="block",z.delayedCall(3,()=>{z.to(D.uniforms.uAlpha,{duration:3,value:0}),G.classList.add("ended"),G.style.transform="";let e=n.querySelector(".nexus-gameHero");e&&(e.style.opacity=0,q(),z.delayedCall(.5,()=>{q(),b.enabled=!0,b.lastGlitchTime=Date.now(),v.enabled=!0}))})},(e,a,i)=>{G.style.transform=`scaleX(${a/i})`}),N=new t.TextureLoader(Y),Z=N.load(Me),J=N.load(je),n=document.getElementById(this.props.id);let H=n.querySelector("canvas.nexus-webgl");const p=new t.Scene,r=new t.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.01,1e3);r.position.z=3;const l=new t.WebGLRenderer({canvas:H,alpha:!0});let K=1200,Q=600;const S=400,R=K/Q;let L=r.position.z*r.getFilmHeight()/r.getFocalLength(),g=(L-1)*r.aspect,x=g/R;const ee=new t.PlaneGeometry(g,L,1,1),D=new t.ShaderMaterial({transparent:!0,uniforms:{uAlpha:{value:1}},vertexShader:`
        void main()
        {
            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
    `,fragmentShader:`
        uniform float uAlpha;
    
        void main()
        {
            gl_FragColor = vec4(0.0, 0.0, 0.0, uAlpha);
        }
    `}),F=new t.Mesh(ee,D);F.position.z=r.position.z-.1,p.add(F),l.setSize(n.clientWidth,n.clientHeight),l.setPixelRatio(Math.min(window.devicePixelRatio,2)),n.querySelector(".nexus-renderer-container").appendChild(l.domElement),H.style.display="none";let T=null;l.getPixelRatio()===1&&l.capabilities.isWebGL2?T=t.WebGLMultisampleRenderTarget:T=t.WebGLRenderTarget;const te=new T(window.innerWidth,window.innerHeight,{minFilter:t.LinearFilter,maxFilter:t.LinearFilter,format:t.RGBAFormat,encoding:t.sRGBEncoding,type:t.HalfFloatType}),u=new ue(l,te);u.setPixelRatio(Math.min(window.devicePixelRatio,2)),u.setSize(n.clientWidth,n.clientHeight);const ae=new fe(p,r);u.addPass(ae);const b=new we;b.goWild=!1,b.enabled=!1,u.addPass(b);const _=new xe(ye);_.enabled=!0,u.addPass(_);const O=new be;if(O.enabled=!0,u.addPass(O),l.getPixelRatio()===1&&!l.capabilities.isWebGL2){const e=new ve;u.addPass(e),console.log("Using SMAA")}const v=new he(r,l.domElement);v.screenSpacePanning=!0,v.enableDamping=!0,v.enabled=!1;const A=new t.Vector2;n.addEventListener("mousemove",e=>{A.x=e.layerX/n.clientWidth*2-1,A.y=-(e.layerY/n.clientHeight)*2+1}),n.addEventListener("click",()=>{f&&(f.object.material.opacity=1)});let c=new Map,W=.01/4;c.set("me",new C({name:"me",diameter:W,meshWidth:g,meshHeight:x,neurofeedbackDimensions:Object.keys(this.bci.atlas.data.eeg[0].means)})),c.set("Los Angeles",new C({latitude:34.0522,longitude:-118.2437,diameter:W,meshWidth:g,meshHeight:x,neurofeedbackDimensions:Object.keys(this.bci.atlas.data.eeg[0].means)})),c.set("Somewhere",new C({latitude:0,longitude:0,diameter:W,meshWidth:g,meshHeight:x,neurofeedbackDimensions:Object.keys(this.bci.atlas.data.eeg[0].means)}));const se=new t.PlaneGeometry(g,x,S,S/R);let ne=Date.now(),V=.03;const M=new t.ShaderMaterial({vertexShader:pe,fragmentShader:ge,transparent:!0,wireframe:!0,blending:t.AdditiveBlending,uniforms:{point:{value:new t.Vector2(NaN,NaN)},count:{value:1},uTime:{value:0},uTexture:{value:Z},displacementMap:{value:J},displacementHeight:{value:.04},colorThreshold:{value:V},aspectRatio:{value:window.innerWidth/window.innerHeight}}}),B=new t.Mesh(se,M);p.add(B),this.resizeNexus=()=>{r.aspect=window.innerWidth/window.innerHeight,r.updateProjectionMatrix(),g=(L-1)*r.aspect,x=g/R,ie(),c.forEach(e=>{if(e.active){e.updateMesh(g,x);let a=e.marker.position.clone();a.project(r);let i=n.clientWidth*a.x*.5;e.element.style.transform=`translate(${i}px)`;let m=n.clientHeight*a.y*.5;e.element.style.transform=`translate(${m}px)`,e.name=="me"&&(M.uniforms.point.value=new t.Vector2(e.x,e.y),M.uniforms.aspectRatio.value=window.innerWidth/window.innerHeight,v.target.set(e.x,e.y,e.z))}}),U(),l.setSize(n.clientWidth,n.clientHeight),l.setPixelRatio(Math.min(window.devicePixelRatio,2)),u.setPixelRatio(Math.min(window.devicePixelRatio,2)),u.setSize(n.clientWidth,n.clientHeight)},window.addEventListener("resize",this.resizeNexus,!1);function ie(){let e=new t.PlaneGeometry(g,x,S,S/R);B.geometry.dispose(),B.geometry=e}let f=null;var $=()=>{setTimeout(function(){requestAnimationFrame($)},1e3/60),oe(),M.uniforms.uTime.value=Date.now()-ne,c.forEach(e=>{e.animateLabel(r,n)}),v.update(),u.render()};const re=(e="alpha1")=>{let a=null;if(this.bci.atlas.settings.coherence){let i=this.bci.atlas.data.coherence[0].means[e];if(i.length>0){let m=Math.min(20,i.length);a=i.slice(i.length-m).reduce((d,w)=>d+w)/m}}return a!=null?a:.5+Math.sin(Date.now()/1e3)/2},oe=()=>{P.setFromCamera(A,r);const e=Array.from(c.keys()).map(s=>c.get(s).marker),a=P.intersectObjects(e);if(a.length){if(f===null){const s=a[0].object.scale;a[0].object.scale.set(s.x*2,s.y*2,s.z*2),a[0].object.material.opacity=.75}f=a[0]}else{if(f!==null){const s=f.object.scale;f.object.scale.set(s.x/2,s.y/2,s.z/2),f.object.material.opacity=.5}f=null}c.forEach(s=>{s.prevMarkers.forEach(o=>{o.geometry.dispose(),o.material.dispose(),p.remove(o)}),s.prevGroups.forEach(o=>{p.remove(o)}),p.add(s.marker),p.add(s.neurofeedbackGroup),s.neurofeedbackGroup.rotateZ(.01)});let i=c.get("me"),m=this.bci.atlas,E=m.data.eegshared.eegChannelTags,d={};i.neurofeedbackDimensions.forEach(s=>{d[s]=[]}),E.forEach(s=>{let o=m.getEEGDataByTag(s.tag);o&&i.neurofeedbackDimensions.forEach(j=>{o.means[j].length!=0&&d[j].push(o.means[j][o.means[j].length-1])})}),i.neurofeedbackDimensions.forEach(s=>{let o=d[s].length>1?1/4*d[s].reduce((j,le)=>j+le)/d[s].length:1;i.neurofeedbackGroup.getObjectByName(s).scale.set(o,o,o),M.uniforms.colorThreshold.value=V*o});let w=p.getObjectByName("coherenceLine"),X=re();w&&(w.material.opacity=X),b.glitchFrequency=Math.pow(1-X,3)*60};function U(){let e=p.getObjectByName("coherenceLine");e&&(e.geometry.dispose(),e.material.dispose(),p.remove(e));const a=[];c.forEach(m=>{a.length<2&&a.push(m.marker.position)});let i=new t.Vector3().subVectors(a[1],a[0]);if(!isNaN(i.length())){const m=new t.CylinderGeometry(5e-4,5e-4,i.length(),32);m.applyMatrix4(new t.Matrix4().makeRotationX(Math.PI/2));const E=new t.MeshBasicMaterial({color:16711935,transparent:!0,blending:t.AdditiveBlending,opacity:1}),d=new t.Mesh(m,E);d.name="coherenceLine";let w=new t.Vector3().addVectors(a[0],i.multiplyScalar(.5));d.position.set(w.x,w.y,w.z),d.lookAt(a[1]),p.add(d)}}function q(){navigator.geolocation.getCurrentPosition(e=>{c.get("me").setGeolocation(e.coords);let a=c.get("me");U(),M.uniforms.point.value=new t.Vector2(a.x,a.y),v.target.set(a.x,a.y,a.z),r.position.set(a.x,a.y)},e=>{console.warn(`ERROR(${e.code}): ${e.message}`)},{enableHighAccuracy:!0,timeout:1e4,maximumAge:0})}$()}deinit(){this.AppletHTML.deleteNode()}responsive(){this.resizeNexus()}configure(h=[]){h.forEach((y,P)=>{})}}I(NexusApplet,"devices",["eeg"]);
