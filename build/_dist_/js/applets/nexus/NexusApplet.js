var me=Object.defineProperty;var Y=(P,d,w)=>(typeof d!="symbol"&&(d+=""),d in P?me(P,d,{enumerable:!0,configurable:!0,writable:!0,value:w}):P[d]=w);import{brainsatplay as he}from"../../brainsatplay.js";import{DOMFragment as pe}from"../../frontend/utils/DOMFragment.js";import*as t from"../../../../_snowpack/pkg/three.js";import{UserMarker as z}from"./UserMarker.js";import{OrbitControls as ge}from"../../../../_snowpack/pkg/three/examples/jsm/controls/OrbitControls.js";import"../../../../_snowpack/pkg/three/examples/jsm/libs/stats.module.js";import ue from"./shaders/map/vertex.js";import fe from"./shaders/map/fragment.js";import{EffectComposer as we}from"../../../../_snowpack/pkg/three/examples/jsm/postprocessing/EffectComposer.js";import{RenderPass as ye}from"../../../../_snowpack/pkg/three/examples/jsm/postprocessing/RenderPass.js";import{GlitchPass as xe}from"./postprocessing/CustomGlitchPass.js";import{RGBShiftShader as ve}from"../../../../_snowpack/pkg/three/examples/jsm/shaders/RGBShiftShader.js";import{ShaderPass as be}from"../../../../_snowpack/pkg/three/examples/jsm/postprocessing/ShaderPass.js";import{SMAAPass as je}from"../../../../_snowpack/pkg/three/examples/jsm/postprocessing/SMAAPass.js";import{UnrealBloomPass as Me}from"../../../../_snowpack/pkg/three/examples/jsm/postprocessing/UnrealBloomPass.js";import{gsap as N}from"../../../../_snowpack/pkg/gsap.js";import Pe from"./img/mapTexture.jpeg.proxy.js";import ke from"./img/mapDisplacement.jpeg.proxy.js";export class NexusApplet{constructor(d=document.body,w=new he,j=[]){this.parentNode=d,this.settings=j,this.bci=w,this.AppletHTML=null,this.props={id:String(Math.floor(Math.random()*1e6))}}init(){let d=(e=this.props)=>`
            <div id='${e.id}' class="nexus-wrapper" style='height:${e.height}; width:${e.width};'>
                <div id="nexus-renderer-container"><canvas class="nexus-webgl"></canvas>                </div>
                <div class="nexus-loading-bar"></div>
                <div class="nexus-point-container"></div>
                <div id="nexus-gameHero" class="nexus-container">
                <div>
                <h1>Nexus</h1>
                <p>Neurofeedback + Group Meditation</p>
                </div></div>
            </div>
            `,w=(e=this.props)=>{document.getElementById(e.id)};this.AppletHTML=new pe(d,this.parentNode,this.props,w,void 0,"NEVER"),this.settings.length>0&&this.configure(this.settings);const j=new t.Raycaster,H=document.querySelector(".nexus-loading-bar"),Z=new t.LoadingManager(()=>{l.setSize(n.clientWidth,n.clientHeight),k.style.display="block",N.delayedCall(3,()=>{N.to(F.uniforms.uAlpha,{duration:3,value:0}),H.classList.add("ended"),H.style.transform="";let e=document.getElementById("nexus-gameHero");e&&(e.style.opacity=0,X(),N.delayedCall(.5,()=>{X(),M.enabled=!0,M.lastGlitchTime=Date.now(),x.enabled=!0}))})},(e,a,r)=>{H.style.transform=`scaleX(${a/r})`}),D=new t.TextureLoader(Z),J=D.load(Pe),K=D.load(ke),n=document.getElementById(this.props.id);let k=document.querySelector("canvas.nexus-webgl");const m=new t.Scene,o=new t.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.01,1e3);o.position.z=3;const l=new t.WebGLRenderer({canvas:k,alpha:!0});let Q=1200,ee=600;const S=400,E=Q/ee;let L=o.position.z*o.getFilmHeight()/o.getFocalLength(),h=(L-1)*o.aspect,y=h/E;const te=new t.PlaneGeometry(h,L,1,1),F=new t.ShaderMaterial({transparent:!0,uniforms:{uAlpha:{value:1}},vertexShader:`
        void main()
        {
            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
    `,fragmentShader:`
        uniform float uAlpha;
    
        void main()
        {
            gl_FragColor = vec4(0.0, 0.0, 0.0, uAlpha);
        }
    `}),_=new t.Mesh(te,F);_.position.z=o.position.z-.1,m.add(_),l.setSize(n.clientWidth,n.clientHeight),l.setPixelRatio(Math.min(window.devicePixelRatio,2)),document.getElementById("nexus-renderer-container").appendChild(l.domElement),k=document.querySelector("canvas.nexus-webgl"),k.style.display="none";let A=null;l.getPixelRatio()===1&&l.capabilities.isWebGL2?A=t.WebGLMultisampleRenderTarget:A=t.WebGLRenderTarget;const ae=new A(window.innerWidth,window.innerHeight,{minFilter:t.LinearFilter,maxFilter:t.LinearFilter,format:t.RGBAFormat,encoding:t.sRGBEncoding,type:t.HalfFloatType}),p=new we(l,ae);p.setPixelRatio(Math.min(window.devicePixelRatio,2)),p.setSize(n.clientWidth,n.clientHeight);const se=new ye(m,o);p.addPass(se);const M=new xe;M.goWild=!1,M.enabled=!1,p.addPass(M);const O=new be(ve);O.enabled=!0,p.addPass(O);const V=new Me;if(V.enabled=!0,p.addPass(V),l.getPixelRatio()===1&&!l.capabilities.isWebGL2){const e=new je;p.addPass(e),console.log("Using SMAA")}const x=new ge(o,l.domElement);x.screenSpacePanning=!0,x.enableDamping=!0,x.enabled=!1;const C=new t.Vector2;n.addEventListener("mousemove",e=>{C.x=e.layerX/n.clientWidth*2-1,C.y=-(e.layerY/n.clientHeight)*2+1}),n.addEventListener("click",()=>{u&&(u.object.material.opacity=1)});let c=new Map,T=.01/4;c.set("me",new z({name:"me",diameter:T,meshWidth:h,meshHeight:y,neurofeedbackDimensions:Object.keys(this.bci.atlas.data.eeg[0].means)})),c.set("Los Angeles",new z({latitude:34.0522,longitude:-118.2437,diameter:T,meshWidth:h,meshHeight:y,neurofeedbackDimensions:Object.keys(this.bci.atlas.data.eeg[0].means)})),c.set("Somewhere",new z({latitude:0,longitude:0,diameter:T,meshWidth:h,meshHeight:y,neurofeedbackDimensions:Object.keys(this.bci.atlas.data.eeg[0].means)}));const ne=new t.PlaneGeometry(h,y,S,S/E);let ie=Date.now(),$=.03;const v=new t.ShaderMaterial({vertexShader:ue,fragmentShader:fe,transparent:!0,wireframe:!0,blending:t.AdditiveBlending,uniforms:{point:{value:new t.Vector2(NaN,NaN)},count:{value:1},uTime:{value:0},uTexture:{value:J},displacementMap:{value:K},displacementHeight:{value:.04},colorThreshold:{value:$},aspectRatio:{value:window.innerWidth/window.innerHeight}}}),W=new t.Mesh(ne,v);m.add(W),this.resizeNexus=()=>{o.aspect=window.innerWidth/window.innerHeight,o.updateProjectionMatrix(),h=(L-1)*o.aspect,y=h/E,re(),c.forEach(e=>{if(e.active){e.updateMesh(h,y);let a=e.marker.position.clone();a.project(o);let r=n.clientWidth*a.x*.5;e.element.style.transform=`translate(${r}px)`;let f=n.clientHeight*a.y*.5;e.element.style.transform=`translate(${f}px)`,e.name=="me"&&(v.uniforms.point.value=new t.Vector2(e.x,e.y),v.uniforms.aspectRatio.value=window.innerWidth/window.innerHeight,x.target.set(e.x,e.y,e.z))}}),I(),l.setSize(n.clientWidth,n.clientHeight),l.setPixelRatio(Math.min(window.devicePixelRatio,2)),p.setPixelRatio(Math.min(window.devicePixelRatio,2)),p.setSize(n.clientWidth,n.clientHeight)},window.addEventListener("resize",this.resizeNexus,!1);function re(){let e=new t.PlaneGeometry(h,y,S,S/E);W.geometry.dispose(),W.geometry=e}let u=null,oe=.01,R=1;var U=()=>{setTimeout(function(){requestAnimationFrame(U)},1e3/60),ce(),v.uniforms.uTime.value=Date.now()-ie,c.forEach(e=>{e.animateLabel(o,n)}),x.update(),p.render()};const le=(e="alpha1")=>{let a=null;if(this.bci.atlas.settings.coherence){let r=this.bci.atlas.data.coherence[0].means[e];r.length>0&&(a=1e3*r[r.length-1])}return a!=null?a:.5+Math.sin(Date.now()/1e4)/2},ce=()=>{j.setFromCamera(C,o);const e=Array.from(c.keys()).map(s=>c.get(s).marker),a=j.intersectObjects(e);if(a.length){if(u===null){const s=a[0].object.scale;a[0].object.scale.set(s.x*2,s.y*2,s.z*2),a[0].object.material.opacity=.75}u=a[0]}else{if(u!==null){const s=u.object.scale;u.object.scale.set(s.x/2,s.y/2,s.z/2),u.object.material.opacity=.5}u=null}c.forEach(s=>{s.prevMarkers.forEach(i=>{i.geometry.dispose(),i.material.dispose(),m.remove(i)}),s.prevGroups.forEach(i=>{m.remove(i)}),m.add(s.marker),m.add(s.neurofeedbackGroup),s.neurofeedbackGroup.rotateZ(.01)});let r=c.get("me"),f=this.bci.atlas,B=f.data.eegshared.eegChannelTags,g={},G=[];r.neurofeedbackDimensions.forEach(s=>{g[s]=[]}),B.forEach(s=>{let i=f.getEEGDataByTag(s.tag);i&&r.neurofeedbackDimensions.forEach(b=>{i.means[b].length!=0&&g[b].push(i.means[b][i.means[b].length-1])})}),r.neurofeedbackDimensions.forEach(s=>{let i=g[s].length>1?1/4*g[s].reduce((b,de)=>b+de)/g[s].length:1;r.neurofeedbackGroup.getObjectByName(s).scale.set(i,i,i),v.uniforms.colorThreshold.value=$*i});let q=m.getObjectByName("coherenceLine");if(q){let i=le()-R;R=R+oe*i,q.material.opacity=R}};function I(){let e=m.getObjectByName("coherenceLine");e&&(e.geometry.dispose(),e.material.dispose(),m.remove(e));const a=[];c.forEach(f=>{a.length<2&&a.push(f.marker.position)});let r=new t.Vector3().subVectors(a[1],a[0]);if(!isNaN(r.length())){const f=new t.CylinderGeometry(5e-4,5e-4,r.length(),32);f.applyMatrix4(new t.Matrix4().makeRotationX(Math.PI/2));const B=new t.MeshBasicMaterial({color:16711935,transparent:!0,blending:t.AdditiveBlending,opacity:1}),g=new t.Mesh(f,B);g.name="coherenceLine";let G=new t.Vector3().addVectors(a[0],r.multiplyScalar(.5));g.position.set(G.x,G.y,G.z),g.lookAt(a[1]),m.add(g)}}function X(){navigator.geolocation.getCurrentPosition(e=>{c.get("me").setGeolocation(e.coords);let a=c.get("me");I(),v.uniforms.point.value=new t.Vector2(a.x,a.y),x.target.set(a.x,a.y,a.z),o.position.set(a.x,a.y)},e=>{console.warn(`ERROR(${e.code}): ${e.message}`)},{enableHighAccuracy:!0,timeout:1e4,maximumAge:0})}U()}deinit(){this.AppletHTML.deleteNode()}responsive(){this.resizeNexus()}configure(d=[]){d.forEach((w,j)=>{})}}Y(NexusApplet,"devices",["eeg"]);
