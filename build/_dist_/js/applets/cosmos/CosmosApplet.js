var D=Object.defineProperty;var y=(w,o,c)=>(typeof o!="symbol"&&(o+=""),o in w?D(w,o,{enumerable:!0,configurable:!0,writable:!0,value:c}):w[o]=c);import{brainsatplay as I}from"../../brainsatplay.js";import{DOMFragment as N}from"../../frontend/utils/DOMFragment.js";import*as t from"../../../../_snowpack/pkg/three.js";import{OrbitControls as O}from"../../../../_snowpack/pkg/three/examples/jsm/controls/OrbitControls.js";import"../../../../_snowpack/pkg/three/examples/jsm/libs/stats.module.js";import $ from"./shaders/cosmos/vertex.js";import q from"./shaders/cosmos/fragment.js";import{EffectComposer as V}from"../../../../_snowpack/pkg/three/examples/jsm/postprocessing/EffectComposer.js";import{RenderPass as X}from"../../../../_snowpack/pkg/three/examples/jsm/postprocessing/RenderPass.js";import"../../../../_snowpack/pkg/three/examples/jsm/postprocessing/ShaderPass.js";import{SMAAPass as Y}from"../../../../_snowpack/pkg/three/examples/jsm/postprocessing/SMAAPass.js";import"../../../../_snowpack/pkg/three/examples/jsm/shaders/RGBShiftShader.js";import"../../../../_snowpack/pkg/three/examples/jsm/postprocessing/UnrealBloomPass.js";import{gsap as Z}from"../../../../_snowpack/pkg/gsap.js";import"../../../../_snowpack/pkg/three/examples/jsm/libs/dat.gui.module.js";import J from"./img/dummyTexture.jpeg.proxy.js";export class CosmosApplet{constructor(o=document.body,c=new I,u=[]){this.parentNode=o,this.settings=u,this.bci=c,this.AppletHTML=null,this.props={id:String(Math.floor(Math.random()*1e6))}}init(){let o=(s=this.props)=>`
            <div id='${s.id}' class="cosmos-wrapper" style='height:${s.height}; width:${s.width};'>
                <div id="cosmos-renderer-container"><canvas class="cosmos-webgl"></canvas></div>
                <div class="cosmos-gui-container"></div>
            </div>
            `,c=(s=this.props)=>{document.getElementById(s.id)};this.AppletHTML=new N(o,this.parentNode,this.props,c,void 0,"NEVER"),this.settings.length>0&&this.configure(this.settings);const u=new t.LoadingManager(()=>{Z.delayedCall(.1,()=>{v.style.opacity="1",A()})},(s,n,i)=>{});new t.TextureLoader(u).load(J);const d=document.getElementById(this.props.id),v=document.querySelector("canvas.cosmos-webgl"),f=new t.Scene,e={};e.count=2e5,e.size=.005,e.radius=5,e.branches=3,e.spin=1,e.randomness=.2,e.randomnessPower=3,e.insideColor="#ff6030",e.outsideColor="#1b3984";let m=null,b=null,M=null;const L=()=>{M!==null&&(m.dispose(),b.dispose(),f.remove(M)),m=new t.BufferGeometry;const s=new Float32Array(e.count*3),n=new Float32Array(e.count*3),i=new Float32Array(e.count*3),k=new Float32Array(e.count*1),E=new t.Color(e.insideColor),G=new t.Color(e.outsideColor);for(let g=0;g<e.count;g++){const a=g*3,h=Math.random()*e.radius,S=g%e.branches/e.branches*Math.PI*2,_=Math.pow(Math.random(),e.randomnessPower)*(Math.random()<.5?1:-1)*e.randomness*h,z=Math.pow(Math.random(),e.randomnessPower)*(Math.random()<.5?1:-1)*e.randomness*h,U=Math.pow(Math.random(),e.randomnessPower)*(Math.random()<.5?1:-1)*e.randomness*h;s[a]=Math.cos(S)*h,s[a+1]=0,s[a+2]=Math.sin(S)*h,n[a]=_,n[a+1]=z,n[a+2]=U;const P=E.clone();P.lerp(G,h/e.radius),i[a]=P.r,i[a+1]=P.g,i[a+2]=P.b,k[g]=Math.random()}m.setAttribute("position",new t.BufferAttribute(s,3)),m.setAttribute("aRandomness",new t.BufferAttribute(n,3)),m.setAttribute("color",new t.BufferAttribute(i,3)),m.setAttribute("aScale",new t.BufferAttribute(k,1)),b=new t.ShaderMaterial({depthWrite:!1,blending:t.AdditiveBlending,vertexColors:!0,uniforms:{uTime:{value:0},uSize:{value:30*r.getPixelRatio()}},vertexShader:$,fragmentShader:q}),M=new t.Points(m,b),f.add(M)};let A=()=>{l.aspect=window.innerWidth/window.innerHeight,l.updateProjectionMatrix(),r.setSize(d.clientWidth,d.clientHeight),r.setPixelRatio(Math.min(window.devicePixelRatio,2)),p.setPixelRatio(Math.min(window.devicePixelRatio,2)),p.setSize(d.clientWidth,d.clientHeight)};window.addEventListener("resize",()=>{A()});const l=new t.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,100);l.position.x=3,l.position.y=3,l.position.z=3,f.add(l);const j=new O(l,v);j.enableDamping=!0,j.enabled=!1;const r=new t.WebGLRenderer({canvas:v});r.setSize(d.clientWidth,d.clientHeight),r.setPixelRatio(Math.min(window.devicePixelRatio,2));let C=null;r.getPixelRatio()===1&&r.capabilities.isWebGL2?C=t.WebGLMultisampleRenderTarget:C=t.WebGLRenderTarget;const T=new C(window.innerWidth,window.innerHeight,{minFilter:t.LinearFilter,maxFilter:t.LinearFilter,format:t.RGBAFormat,encoding:t.sRGBEncoding,type:t.HalfFloatType}),p=new V(r,T);p.setPixelRatio(Math.min(window.devicePixelRatio,2)),p.setSize(d.clientWidth,d.clientHeight);const B=new X(f,l);if(p.addPass(B),r.getPixelRatio()===1&&!r.capabilities.isWebGL2){const s=new Y;p.addPass(s),console.log("Using SMAA")}L();const H=(s="alpha1")=>{let n=null;if(this.bci.atlas.settings.coherence){let i=this.bci.atlas.data.coherence[0].means[s];i.length>0&&(n=1e3*i[i.length-1])}return n!=null?n:.5+Math.sin(Date.now()/1e4)/2},F=new t.Clock;let W=.01,x=1;const R=()=>{const s=F.getElapsedTime();let i=H()-x;x=x+W*i,b.uniforms.uTime.value+=.001+.01*x,j.update(),p.render(),window.requestAnimationFrame(R)};R()}deinit(){this.AppletHTML.deleteNode()}responsive(){}configure(o=[]){o.forEach((c,u)=>{})}}y(CosmosApplet,"devices",["eeg"]);
