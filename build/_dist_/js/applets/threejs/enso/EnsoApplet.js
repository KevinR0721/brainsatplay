var B=Object.defineProperty;var k=(c,s,d)=>(typeof s!="symbol"&&(s+=""),s in c?B(c,s,{enumerable:!0,configurable:!0,writable:!0,value:d}):c[s]=d);import{brainsatplay as I}from"../../../../brainsatplay.js";import{DOMFragment as N}from"../../../../frontend/utils/DOMFragment.js";import*as t from"../../../../../_snowpack/pkg/three.js";import{OrbitControls as D}from"../../../../../_snowpack/pkg/three/examples/jsm/controls/OrbitControls.js";import"../../../../../_snowpack/pkg/three/examples/jsm/libs/stats.module.js";import U from"./shaders/enso/vertex.glsl.js";import q from"./shaders/enso/fragment.glsl.js";import{EffectComposer as O}from"../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/EffectComposer.js";import{RenderPass as $}from"../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/RenderPass.js";import"../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/ShaderPass.js";import{SMAAPass as V}from"../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/SMAAPass.js";import"../../../../../_snowpack/pkg/three/examples/jsm/shaders/RGBShiftShader.js";import{UnrealBloomPass as X}from"../../../../../_snowpack/pkg/three/examples/jsm/postprocessing/UnrealBloomPass.js";import{gsap as J}from"../../../../../_snowpack/pkg/gsap.js";import"../../../../../_snowpack/pkg/three/examples/jsm/libs/dat.gui.module.js";import K from"./img/dummyTexture.jpeg.js";export class EnsoApplet{constructor(s=document.body,d=new I,h=[]){this.parentNode=s,this.settings=h,this.bci=d,this.AppletHTML=null,this.props={id:String(Math.floor(Math.random()*1e6))}}init(){let s=(e=this.props)=>`
            <div id='${e.id}' class="brainsatplay-threejs-wrapper" style='height:${e.height}; width:${e.width};'>
                <div class="brainsatplay-threejs-renderer-container"><canvas class="brainsatplay-threejs-webgl"></canvas></div>
                <div class="brainsatplay-threejs-gui-container"></div>
                <div class="brainsatplay-threejs-gameHero brainsatplay-threejs-container">
                    <div>
                        <p>Alpha Coherence: <span class="brainsatplay-threejs-alphacoherence"></span></p>
                    </div>
                </div>
            </div>
            `,d=(e=this.props)=>{document.getElementById(e.id)};this.AppletHTML=new N(s,this.parentNode,this.props,d,void 0,"NEVER"),this.settings.length>0&&this.configure(this.settings);const h=new t.LoadingManager(()=>{J.delayedCall(.1,()=>{j.style.opacity="1",this.resizeEnso()})},(e,l,m)=>{});new t.TextureLoader(h).load(K);const i=document.getElementById(this.props.id);let j=i.querySelector("canvas.brainsatplay-threejs-webgl");const v=new t.Scene;let b=100;const a=new t.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.01,1e3);a.position.z=b*2;const n=new t.WebGLRenderer({canvas:j,alpha:!0});let T=1200,L=600;const Y=400,P=T/L;let x=a.position.z*a.getFilmHeight()/a.getFocalLength(),u=(x-1)*a.aspect,H=u/P;n.setSize(i.clientWidth,i.clientHeight),n.setPixelRatio(Math.min(window.devicePixelRatio,2)),i.querySelector(".brainsatplay-threejs-renderer-container").appendChild(n.domElement);let w=null;n.getPixelRatio()===1&&n.capabilities.isWebGL2?w=t.WebGLMultisampleRenderTarget:w=t.WebGLRenderTarget;const E=new w(window.innerWidth,window.innerHeight,{minFilter:t.LinearFilter,maxFilter:t.LinearFilter,format:t.RGBAFormat,encoding:t.sRGBEncoding,type:t.HalfFloatType}),o=new O(n,E);o.setPixelRatio(Math.min(window.devicePixelRatio,2)),o.setSize(i.clientWidth,i.clientHeight);const C=new $(v,a);o.addPass(C);const f=new X;if(f.enabled=!0,f.radius=1,o.addPass(f),n.getPixelRatio()===1&&!n.capabilities.isWebGL2){const e=new V;o.addPass(e),console.log("Using SMAA")}const g=new D(a,n.domElement);g.screenSpacePanning=!0,g.enableDamping=!0,g.enabled=!1;const S=()=>new t.TorusGeometry(b,3,10,100),W=S();let A=Date.now();var r=new function(){this.rPower=0,this.gPower=.85,this.bPower=1,this.alpha=1,this.noiseIntensity=.5,this.updateColor=function(){p.uniforms.uColor.value=[r.rPower,r.gPower,r.bPower,r.alpha]},this.updateNoise=function(){p.uniforms.uNoiseIntensity.value=r.noiseIntensity}};const p=new t.ShaderMaterial({vertexShader:U,fragmentShader:q,uniforms:{uTime:{value:0},aspectRatio:{value:window.innerWidth/window.innerHeight},uColor:{value:[r.rPower,r.gPower,r.bPower,r.alpha]},uNoiseIntensity:{value:r.noiseIntensity}}}),y=new t.Mesh(W,p);v.add(y),this.resizeEnso=()=>{a.aspect=window.innerWidth/window.innerHeight,a.updateProjectionMatrix(),u=(x-1)*a.aspect,H=u/P,G(),n.setSize(i.clientWidth,i.clientHeight),n.setPixelRatio(Math.min(window.devicePixelRatio,2)),o.setPixelRatio(Math.min(window.devicePixelRatio,2)),o.setSize(i.clientWidth,i.clientHeight)},window.addEventListener("resize",this.resizeEnso,!1);function G(){let e=S();y.geometry.dispose(),y.geometry=e}const F=(e="alpha1")=>{let l=null;if(this.bci.atlas.settings.coherence){let m=this.bci.atlas.data.coherence[0].means[e];if(m.length>0){let R=Math.min(20,m.length);l=m.slice(m.length-R).reduce((_,z)=>_+z)/R}}return l!=null?l:.5+Math.sin(Date.now()/1e3)/2};var M=()=>{setTimeout(function(){requestAnimationFrame(M)},1e3/60),p.uniforms.uTime.value=Date.now()-A;let e=F();p.uniforms.uNoiseIntensity.value=1-e;let l=i.querySelector(".brainsatplay-threejs-alphacoherence");l&&(l.innerHTML=e.toFixed(5)),g.update(),o.render()};M()}deinit(){this.AppletHTML.deleteNode()}responsive(){this.resizeEnso()}configure(s=[]){s.forEach((d,h)=>{})}}k(EnsoApplet,"devices",["eeg"]);
