import{gpuUtils as w}from"./signal_analysis/gpuUtils.js";import{eegmath as p}from"./eegmath.js";const d=new w;onmessage=a=>{console.time("worker");let t="function not defined";switch(a.data.foo){case"xcor":t=p.crosscorrelation(a.data.input[0],a.data.input[1]);break;case"autocor":t=p.autocorrelation(a.data.input);break;case"cov1d":t=p.cov1d(a.data.input[0],a.data.input[1]);break;case"cov2d":t=p.cov2d(a.data.input);break;case"sma":t=p.sma(a.data.input[0],a.data.input[1]);break;case"dft":var n=1;a.data.input[2]!==void 0&&(n=a.data.input[2]),t=d.gpuDFT(a.data.input[0],a.data.input[1],n);break;case"multidft":var n=1;a.data.input[2]!==void 0&&(n=a.data.input[2]),t=d.MultiChannelDFT(a.data.input[0],a.data.input[1],n);break;case"multidftbandpass":var n=1;a.data.input[4]!==void 0&&(n=a.data.input[4]),t=d.MultiChannelDFT_Bandpass(a.data.input[0],a.data.input[1],a.data.input[2],a.data.input[3],n);break;case"gpucoh":t=d.gpuCoherence(a.data.input[0],a.data.input[1],a.data.input[2],a.data.input[3],a.data.input[4]);break;case"coherence":const b=p.correlograms(a.data.input[0]),v=[...a.data.input[0],...b];var s,n=1;s=d.MultiChannelDFT_Bandpass(v,a.data.input[1],a.data.input[2],a.data.input[3],n);const c=s[1].splice(a.data.input[0].length,v.length-a.data.input[0].length),m=[],f=a.data.input[0].length;var i=0,o=0;c.forEach((e,g)=>{if(o+i===f){var r=c.splice(g,1);i++,c.splice(i,0,...r),o=0}o++});var l=[];i=0,o=1,c.forEach((e,g)=>{var r=new Array(e.length).fill(0);g<f?(e.forEach((h,u)=>{r[u]=h}),l.push(r)):(e.forEach((h,u)=>{r[u]=h*h/(l[i][u]*l[i+o][u]),r[u]>1&&(r[u]=1)}),o++,o+i===f&&(i++,o=1),m.push(r))}),t=[s[0],s[1],m];break}console.timeEnd("worker"),postMessage({output:t,foo:a.data.foo,origin:a.data.origin})};
