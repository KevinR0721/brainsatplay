export class Biquad{constructor(t,h,s,i=1/Math.sqrt(2),a=0){if(["lowpass","highpass","bandpass","notch","peak","lowshelf","highshelf"].indexOf(t)<0)return console.error("Valid types: 'lowpass','highpass','bandpass','notch','peak','lowshelf','highshelf'"),!1;this.type=t,this.freq=h,this.sps=s,this.Q=i,this.dbGain=a,this.a0=0,this.a1=0,this.a2=0,this.b0=0,this.b1=0,this.b2=0,this.x1=0,this.x2=0,this.y1=0,this.y2=0;let l=Math.pow(10,a/40),r=2*Math.PI*h/s,o=Math.sin(r),p=Math.cos(r),b=o/(2*i),n=Math.sqrt(l+l);this[t](l,o,p,b,n),this.b0/=this.a0,this.b1/=this.a0,this.b2/=this.a0,this.a1/=this.a0,this.a2/=this.a0}lowpass(t,h,s,i,a){this.b0=(1-s)*.5,this.b1=1-s,this.b2=(1-s)*.5,this.a0=1+i,this.a1=-2*s,this.a2=1-i}highpass(t,h,s,i,a){this.b0=(1+s)*.5,this.b1=-(1+s),this.b2=(1+s)*.5,this.a0=1+i,this.a1=-2*s,this.a2=1-i}bandpass(t,h,s,i,a){this.b0=i,this.b1=0,this.b2=-i,this.a0=1+i,this.a1=-2*s,this.a2=1-i}notch(t,h,s,i,a){this.b0=1,this.b1=-2*s,this.b2=1,this.a0=1+i,this.a1=-2*s,this.a2=1-i}peak(t,h,s,i,a){this.b0=1+i*t,this.b1=-2*s,this.b2=1-i*t,this.a0=1+i/t,this.a1=-2*s,this.a2=1-i/t}lowshelf(t,h,s,i,a){this.b0=t*(t+1-(t-1)*s+a*h),this.b1=2*t*(t-1-(t+1)*s),this.b2=t*(t+1-(t-1)*s-a*h),this.a0=t+1+(t+1)*s+a*h,this.a1=2*(t-1+(t+1)*s),this.a2=t+1+(t-1)*s-a*h}highshelf(t,h,s,i,a){this.b0=t*(t+1+(t-1)*s+a*h),this.b1=2*t*(t-1+(t+1)*s),this.b2=t*(t+1-(t-1)*s-a*h),this.a0=t+1-(t+1)*s-a*h,this.a1=2*(t-1-(t+1)*s),this.a2=t+1-(t-1)*s-a*h}applyFilter(t){let h=this.b0*t+this.b1*this.x1+this.b2*this.x2-this.a1*this.y1-this.a2*this.y2;return this.x2=this.x1,this.x1=t,this.y2=this.y1,this.y1=h,h}zResult(t){try{let h=Math.pow(Math.sin(Math.PI*t*2/(2*this.sps)),2);return(Math.pow(this.b0+this.b1+this.b2,2)-4*(this.b0*this.b1+4*this.b0*this.b2+this.b1*this.b2)*h+16*this.b0*this.b2*h*h)/(Math.pow(1+this.a1+this.a2,2)-4*(this.a1+4*this.a2+this.a1*this.a2)*h+16*this.a2*h*h)}catch(h){return-200}}static calcCenterFrequency(t,h){return(t+h)/2}static calcBandwidth(t,h){return h-this.calcCenterFrequency(t,h)}static calcBandpassQ(t,h,s=Math.pow(10,Math.floor(Math.log10(t)))){return s*Math.sqrt((t-h)*(t+h))/(2*h)}static calcNotchQ(t,h,s=Math.pow(10,Math.floor(Math.log10(t)))){return s*t*h/Math.sqrt((t-h)*(t+h))}}export class DCBlocker{constructor(t=.995){this.r=t,this.y1=this.y2=this.x1=this.x2=0}applyFilter(t){this.x2=this.x1,this.x1=t;let h=this.x1-this.x2+this.r*this.y1;return this.y2=this.y1,this.y1=h,h}}export const makeNotchFilter=(e,t,h)=>new Biquad("notch",e,t,Biquad.calcNotchQ(e,h),0),makeBandpassFilter=(e,t,h,s=Math.pow(10,Math.floor(Math.log10(Biquad.calcCenterFrequency(e,t)))))=>new Biquad("bandpass",Biquad.calcCenterFrequency(e,t),h,Biquad.calcBandpassQ(Biquad.calcCenterFrequency(e,t),Biquad.calcBandwidth(e,t),s),0);export class BiquadChannelFilterer{constructor(t="A0",h=512,s=!0,i=1){this.channel=t,this.idx=0,this.sps=h,this.filtering=s,this.bplower=3,this.bpupper=45,this.scalingFactor=i,this.useSMA4=!1,this.last4=[],this.useNotch50=!0,this.useNotch60=!0,this.useLp1=!1,this.useBp1=!1,this.useDCB=!0,this.useScaling=!1,this.notch50=[makeNotchFilter(50,h,1),makeNotchFilter(100,h,1)],this.notch60=[makeNotchFilter(60,h,1),makeNotchFilter(120,h,1)],this.lp1=[new Biquad("lowpass",50,h),new Biquad("lowpass",50,h),new Biquad("lowpass",50,h),new Biquad("lowpass",50,h)],this.bp1=[makeBandpassFilter(this.bplower,this.bpupper,h,9.75),makeBandpassFilter(this.bplower,this.bpupper,h,9.75),makeBandpassFilter(this.bplower,this.bpupper,h,9.75),makeBandpassFilter(this.bplower,this.bpupper,h,9.75)],this.dcb=new DCBlocker(.995)}reset(t=this.sps){this.notch50=makeNotchFilter(50,t,1),this.notch60=makeNotchFilter(60,t,1),this.lp1=[new Biquad("lowpass",50,t),new Biquad("lowpass",50,t),new Biquad("lowpass",50,t),new Biquad("lowpass",50,t)],this.bp1=[makeBandpassFilter(this.bplower,this.bpupper,t,9.75),makeBandpassFilter(this.bplower,this.bpupper,t,9.75),makeBandpassFilter(this.bplower,this.bpupper,t,9.75),makeBandpassFilter(this.bplower,this.bpupper,t,9.75)],this.dcb=new DCBlocker(.995)}setBandpass(t=this.bplower,h=this.bpupper,s=this.sps){this.bplower=t,this.bpupper=h,this.bp1=[makeBandpassFilter(t,h,s),makeBandpassFilter(t,h,s),makeBandpassFilter(t,h,s),makeBandpassFilter(t,h,s)]}apply(t=0,h=this.lastidx+1){let s=t;return this.filtering===!0&&(this.useDCB===!0&&(s=this.dcb.applyFilter(s)),this.useSMA4===!0&&(h<4?this.last4.push(s):(s=this.last4.reduce((i,a)=>i+a)/this.last4.length,this.last4.shift(),this.last4.push(s))),this.useNotch50===!0&&this.notch50.forEach((i,a)=>{s=i.applyFilter(s)}),this.useNotch60===!0&&this.notch60.forEach((i,a)=>{s=i.applyFilter(s)}),this.useLp1===!0&&this.lp1.forEach((i,a)=>{s=i.applyFilter(s)}),this.useBp1===!0&&(this.bp1.forEach((i,a)=>{s=i.applyFilter(s)}),s*=this.bp1.length),this.useScaling===!0&&(s*=this.scalingFactor)),this.lastidx=h,s}}
