var o=Object.defineProperty;var n=(l,e,t)=>(typeof e!="symbol"&&(e+=""),e in l?o(l,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):l[e]=t);var d=(l,e,t)=>new Promise((s,a)=>{var h=i=>{try{c(t.next(i))}catch(g){a(g)}},r=i=>{try{c(t.throw(i))}catch(g){a(g)}},c=i=>i.done?s(i.value):Promise.resolve(i.value).then(h,r);c((t=t.apply(l,e)).next())});import{BiquadChannelFilterer as u}from"../signal_analysis/BiquadFilters.js";import{DataAtlas as p}from"../DataAtlas.js";import{MuseClient as m}from"../../../../_snowpack/pkg/muse-js.js";import{DOMFragment as y}from"../../frontend/utils/DOMFragment.js";export class musePlugin{constructor(e,t=this.onconnect,s=this.ondisconnect){n(this,"init",(e,t)=>{if(e.sps=256,e.deviceType="eeg",e.eegChannelTags=[{ch:0,tag:"TP9",analyze:!0},{ch:1,tag:"AF7",analyze:!0},{ch:2,tag:"AF8",analyze:!0},{ch:3,tag:"TP10",analyze:!0}],this.device=new m,e.useFilters===!0&&e.eegChannelTags.forEach((s,a)=>{s.tag!=="other"?this.filters.push(new u(s.ch,e.sps,!0,1)):this.filters.push(new u(s.ch,e.sps,!1,1))}),t===!0){let s="muse";this.atlas=new p(location+":"+this.mode,{eegshared:{eegChannelTags:e.eegChannelTags,sps:e.sps}},s,!0,!0,e.analysis),e.useAtlas=!0}else typeof t=="object"&&(this.atlas=t,this.atlas.data.eegshared.eegChannelTags=e.eegChannelTags,this.atlas.data.eegshared.sps=e.sps,this.atlas.data.eegshared.frequencies=this.atlas.bandpassWindow(0,128,e.sps*.5),this.atlas.data.eegshared.bandFreqs=this.atlas.getBandFreqs(this.atlas.data.eegshared.frequencies),this.atlas.data.eeg=this.atlas.genMuseAtlas(),this.atlas.data.coherence=this.atlas.genCoherenceMap(e.eegChannelTags),this.atlas.settings.coherence=!0,this.atlas.settings.eeg=!0,e.useAtlas=!0,e.analysis.length>0&&(this.atlas.settings.analysis.push(...e.analysis),this.atlas.settings.analyzing||(this.atlas.settings.analyzing=!0,this.atlas.analyzer())));this.info=e});n(this,"connect",()=>d(this,null,function*(){yield this.device.connect(),yield this.device.start(),this.device.eegReadings.subscribe(e=>{if(this.info.useAtlas){let t=Array(e.samples.length).fill(e.timestamp);t=t.map((h,r)=>h-(1-this.info.sps/t.length*r/10));let s=this.atlas.getEEGDataByChannel(e.electrode);s.times.push(...t),s.raw.push(...e.samples),s.count+=e.samples.length;let a=new Array(e.samples.length).fill(0);this.info.useFilters===!0&&(this.filters[e.electrode]!==void 0&&e.samples.forEach((h,r)=>{a[r]=this.filters[e.electrode].apply(h)}),s.filtered.push(...a))}}),this.atlas.data.eegshared.startTime=Date.now(),this.atlas.settings.analyzing!==!0&&this.info.analysis.length>0&&(this.atlas.settings.analyzing=!0,setTimeout(()=>{this.atlas.analyzer()},1200)),this.device.gatt.device.addEventListener("gattserverdisconnected",()=>{this.atlas.analyzing=!1,this.ondisconnect()}),this.onconnect()}));n(this,"disconnect",()=>{this.device.disconnect()});n(this,"onconnect",()=>{});n(this,"ondisconnect",()=>{});n(this,"addControls",(e=document.body)=>{let t=Math.floor(Math.random()*1e4),s=()=>`
            `,a=()=>{};this.ui=new y(s,e,void 0,a)});this.atlas=null,this.mode=e,this.device=null,this.filters=[],this.info,this.onconnect=t,this.ondisconnect=s}}
