var b=Object.defineProperty;var p=(m,a,h)=>(typeof a!="symbol"&&(a+=""),a in m?b(m,a,{enumerable:!0,configurable:!0,writable:!0,value:h}):m[a]=h);import{eegmath as f}from"./eegmath.js";export class DataAtlas{constructor(a="atlas",h={eegshared:{eegChannelTags:[{ch:0,tag:"FP1",analyze:!0},{ch:1,tag:"FP2",analyze:!0}],sps:512}},i="10_20",e=!0,s=!1,n=["eegfft"]){p(this,"mapFFTData",(a,h,i)=>{let e=this.data.eeg.find((s,n)=>{if(s.tag===i){if(s.fftCount++,s.fftTimes.push(h),s.ffts.push(a),this.data.eegshared.bandFreqs.scp[1].length>0){var r=a.slice(this.data.eegshared.bandFreqs.scp[1][0],this.data.eegshared.bandFreqs.scp[1][this.data.eegshared.bandFreqs.scp[1].length-1]+1);s.slices.scp.push(r),s.means.scp.push(f.mean(r))}if(this.data.eegshared.bandFreqs.scp[1].length>0){var g=a.slice(this.data.eegshared.bandFreqs.delta[1][0],this.data.eegshared.bandFreqs.delta[1][this.data.eegshared.bandFreqs.delta[1].length-1]+1);s.slices.delta.push(g),s.means.delta.push(f.mean(g))}if(this.data.eegshared.bandFreqs.theta[1].length>0){var d=a.slice(this.data.eegshared.bandFreqs.theta[1][0],this.data.eegshared.bandFreqs.theta[1][this.data.eegshared.bandFreqs.theta[1].length-1]+1);s.slices.theta.push(d),s.means.theta.push(f.mean(d))}if(this.data.eegshared.bandFreqs.alpha1[1].length>0){var l=a.slice(this.data.eegshared.bandFreqs.alpha1[1][0],this.data.eegshared.bandFreqs.alpha1[1][this.data.eegshared.bandFreqs.alpha1[1].length-1]+1);s.slices.alpha1.push(l),s.means.alpha1.push(f.mean(l))}if(this.data.eegshared.bandFreqs.alpha2[1].length>0){var u=a.slice(this.data.eegshared.bandFreqs.alpha2[1][0],this.data.eegshared.bandFreqs.alpha2[1][this.data.eegshared.bandFreqs.alpha2[1].length-1]+1);s.slices.alpha2.push(u),s.means.alpha2.push(f.mean(u))}if(this.data.eegshared.bandFreqs.beta[1].length>0){var c=a.slice(this.data.eegshared.bandFreqs.beta[1][0],this.data.eegshared.bandFreqs.beta[1][this.data.eegshared.bandFreqs.beta[1].length-1]+1);s.slices.beta.push(c),s.means.beta.push(f.mean(c))}if(this.data.eegshared.bandFreqs.lowgamma[1].length>0){var o=a.slice(this.data.eegshared.bandFreqs.lowgamma[1][0],this.data.eegshared.bandFreqs.lowgamma[1][this.data.eegshared.bandFreqs.lowgamma[1].length-1]+1);s.slices.lowgamma.push(o),s.means.lowgamma.push(f.mean(o))}if(this.data.eegshared.bandFreqs.highgamma[1].length>0){var F=a.slice(this.data.eegshared.bandFreqs.highgamma[1][0],this.data.eegshared.bandFreqs.highgamma[1][this.data.eegshared.bandFreqs.highgamma[1].length-1]+1);s.slices.highgamma.push(F),s.means.highgamma.push(f.mean(F))}return!0}})});p(this,"mapCoherenceData",(a,h)=>{a.forEach((i,e)=>{if(this.data.coherence[e].fftCount++,this.data.coherence[e].ffts.push(i),this.data.coherence[e].fftTimes.push(h),this.data.eegshared.bandFreqs.scp[1].length>0){var s=i.slice(this.data.eegshared.bandFreqs.scp[1][0],this.data.eegshared.bandFreqs.scp[1][this.data.eegshared.bandFreqs.scp[1].length-1]+1);this.data.coherence[e].slices.scp.push(s),this.data.coherence[e].means.scp.push(f.mean(s))}if(this.data.eegshared.bandFreqs.delta[1].length>0){var n=i.slice(this.data.eegshared.bandFreqs.delta[1][0],this.data.eegshared.bandFreqs.delta[1][this.data.eegshared.bandFreqs.delta[1].length-1]+1);this.data.coherence[e].slices.delta.push(n),this.data.coherence[e].means.delta.push(f.mean(n))}if(this.data.eegshared.bandFreqs.theta[1].length>0){var r=i.slice(this.data.eegshared.bandFreqs.theta[1][0],this.data.eegshared.bandFreqs.theta[1][this.data.eegshared.bandFreqs.theta[1].length-1]+1);this.data.coherence[e].slices.theta.push(r),this.data.coherence[e].means.theta.push(f.mean(r))}if(this.data.eegshared.bandFreqs.alpha1[1].length>0){var g=i.slice(this.data.eegshared.bandFreqs.alpha1[1][0],this.data.eegshared.bandFreqs.alpha1[1][this.data.eegshared.bandFreqs.alpha1[1].length-1]+1);this.data.coherence[e].slices.alpha1.push(g),this.data.coherence[e].means.alpha1.push(f.mean(g))}if(this.data.eegshared.bandFreqs.alpha2[1].length>0){var d=i.slice(this.data.eegshared.bandFreqs.alpha2[1][0],this.data.eegshared.bandFreqs.alpha2[1][this.data.eegshared.bandFreqs.alpha2[1].length-1]+1);this.data.coherence[e].slices.alpha2.push(d),this.data.coherence[e].means.alpha2.push(f.mean(d))}if(this.data.eegshared.bandFreqs.beta[1].length>0){var l=i.slice(this.data.eegshared.bandFreqs.beta[1][0],this.data.eegshared.bandFreqs.beta[1][this.data.eegshared.bandFreqs.beta[1].length-1]+1);this.data.coherence[e].slices.beta.push(l),this.data.coherence[e].means.beta.push(f.mean(l))}if(this.data.eegshared.bandFreqs.lowgamma[1].length>0){var u=i.slice(this.data.eegshared.bandFreqs.lowgamma[1][0],this.data.eegshared.bandFreqs.lowgamma[1][this.data.eegshared.bandFreqs.lowgamma[1].length-1]+1);this.data.coherence[e].slices.lowgamma.push(u),this.data.coherence[e].means.lowgamma.push(f.mean(u))}if(this.data.eegshared.bandFreqs.highgamma[1].length>0){var c=i.slice(this.data.eegshared.bandFreqs.highgamma[1][0],this.data.eegshared.bandFreqs.highgamma[1][this.data.eegshared.bandFreqs.highgamma[1].length-1]+1);this.data.coherence[e].slices.highgamma.push(c),this.data.coherence[e].means.highgamma.push(f.mean(c))}})});p(this,"bufferEEGSignals",(a=1)=>{let h=Math.floor(this.data.eegshared.sps*a),i=[],e=null;for(var s=0;s<this.data.eegshared.eegChannelTags.length;s++)if(this.data.eegshared.eegChannelTags[s].analyze===!0&&this.data.eegshared.eegChannelTags[s].tag!==null&&this.data.eegshared.eegChannelTags[s].tag!=="other"){let n=this.getEEGDataByTag(this.data.eegshared.eegChannelTags[s].tag);n!==void 0&&(n.filtered.length>0?i.push(n.filtered.slice(n.filtered.length-h)):n.raw.length>0&&i.push(n.raw.slice(n.raw.length-h)),e===null&&(e=n.times[n.times.length-1]))}return this.settings.analyzing===!0&&(this.workerPostTime=e),i});p(this,"readyEEGDataForWriting",(a=0,h="end")=>{let i=["TimeStamps","UnixTime"],e=[],s=0,n=[];this.data.eegshared.eegChannelTags.forEach((r,g)=>{n.push(this.getEEGDataByChannel(r.ch))}),h==="end"&&(h=n[0].count);for(let r=a;r<h;r++){let g=[];g.push(this.toISOLocal(new Date(n[0].times[r])),n[0].times[r]),n.forEach((d,l)=>{d.filtered.length>0?g.push(d.filtered[r].toFixed(0)):d.raw.length>0&&g.push(d.raw[r].toFixed(0))}),n.forEach((d,l)=>{if(d.times[r]===d.fftTimes[s]){if(a===0){let u=[...this.data.eegshared.frequencies].map((c,o)=>c=c.toFixed(3));i.push(coord.tag+"; FFT Hz:",u.join(","))}g.push(d.ffts[s])}}),this.data.coherence.forEach((d,l)=>{if(a===0){let u=[...this.data.eegshared.frequencies].map((c,o)=>c=c.toFixed(3));i.push(coord.tag+"; FFT Hz:",u.join(","))}d.times[l]===d.fftTimes[s]&&g.push(d.ffts[s])}),row.fftTimes[s]===this.datum[0].times[r]&&s++,e.push(g.join(","))}return[i.join(",")+`
`,e.join(`
`)]});p(this,"readyHEGDataForWriting",(a=0,h="end",i=0)=>{let e=["TimeStamps","UnixTime","Red","IR","Ambient","Ratio"],s=[],n=this.data.heg[i];h==="end"&&(h=n.times.length);for(let r=a;r<h;r++)s.push([t,this.toISOLocal(t),n.red[r],n.ir[r],n.ambient[r],n.ratio[r]].join(","));return[e.join(",")+`
`,s.join(`
`)]});p(this,"workeronmessage",a=>{if(a.origin===this.name){if(a.foo==="multidftbandpass"||a.foo==="multidft"){var h=[...a.output[1]];let e=0;this.data.eegshared.eegChannelTags.forEach((s,n)=>{s.tag!==null&&s.tag!=="other"&&s.analyze===!0&&(this.mapFFTData(h[e],this.workerPostTime,s.tag),e++)}),this.checkRollover("eeg")}else if(a.foo==="coherence"){var h=[...a.output[1]],i=[...a.output[2]];let s=0;this.data.eegshared.eegChannelTags.forEach((n,r)=>{n.tag!==null&&n.tag!=="other"&&n.analyze===!0&&(this.mapFFTData(h[s],this.workerPostTime,n.tag),s++)}),this.mapCoherenceData(i,this.workerPostTime),this.checkRollover("eeg")}this.workerWaiting=!1}});p(this,"analyzer",()=>{this.settings.analyzing===!0&&(this.settings.analysis.forEach((a,h)=>{this.analyzerOpts.forEach((i,e)=>{i===a&&this.analyzerFuncs[e]()})}),setTimeout(()=>{requestAnimationFrame(this.analyzer)},50))});this.name=a,this.config=i,this.settings={analyzing:!1,analysis:n,heg:!1,eeg:!1,coherence:!1,eyetracker:!1,accelerometer:!1,hrv:!1,fnirs:!1,ecg:!1,spo2:!1,emg:!1},this.data={eegshared:{eegChannelTags:[],sps:1,startTime:0,frequencies:[],bandFreqs:{scp:[[],[]],delta:[[],[]],theta:[[],[]],alpha1:[[],[]],alpha2:[[],[]],beta:[[],[]],lowgamma:[[],[]],highgamma:[[],[]]}},eeg:[],coherence:[],heg:[],fnirs:[],accelerometer:[],hrv:[],spo2:[],emg:[],ecg:[],eyetracker:[]},Object.assign(this.data,h),this.rolloverLimit=51200,i==="10_20"?(this.settings.eeg=!0,this.data.eeg=this.gen10_20Atlas()):i==="muse"?(this.settings.eeg=!0,this.data.eeg=this.genMuseAtlas()):i==="big"?(this.settings.eeg=!0,this.data.eeg=this.genBigAtlas()):i==="hegduino"?(this.addHEGCoord(this.data.heg.length,0,60,60),this.settings.heg=!0):i==="eyetracker"&&(this.settings.eyetracker=!0,this.addEyeTracker(this.data.eyetracker.length)),e===!0&&(this.settings.coherence=!0,this.data.coherence=this.genCoherenceMap(this.data.eegshared.eegChannelTags)),this.data.eegshared.eegChannelTags&&this.data.eegshared.eegChannelTags.forEach((r,g)=>{this.getEEGDataByTag(r.tag)===void 0&&this.addEEGCoord(r.ch)}),this.data.eegshared.sps&&(this.data.eegshared.frequencies=this.bandpassWindow(0,128,this.data.eegshared.sps*.5),this.data.eegshared.bandFreqs=this.getBandFreqs(this.data.eegshared.frequencies)),this.analyzerOpts=[],this.analyzerFuncs=[],this.workerPostTime=0,this.workerWaiting=!1,this.workerIdx=0,s===!0&&(this.addDefaultAnalyzerFuncs(),window.workerResponses||(window.workerResponses=[]),window.workerResponses.push(this.workeronmessage))}genEEGCoordinateStruct(a,h=0,i=0,e=0){let s={scp:[],delta:[],theta:[],alpha1:[],alpha2:[],beta:[],lowgamma:[],highgamma:[]};return{tag:a,position:{x:h,y:i,z:e},count:0,times:[],raw:[],filtered:[],fftCount:0,fftTimes:[],ffts:[],slices:JSON.parse(JSON.stringify(s)),means:JSON.parse(JSON.stringify(s)),lastReadFFT:0,lastRead:0}}addEEGCoord(a,h=999,i=999,e=999){this.data.eeg.push(this.genEEGCoordinateStruct(a,h,i,e))}genMuseAtlas(){let a=[],h=[[-21.5,70.2,-.1],[28.4,69.1,-.4],[-54.8,33.9,-3.5],[56.6,30.8,-4.1]];function i(n,r){let g=[];return n.forEach((d,l)=>{g.push(.5*(d+r[l]))}),console.log(g),g}let e=["AF7","AF8","TP9","TP10"],s=[i(h[0],h[2]),i(h[1],h[3]),[-80.2,-31.3,-10.7],[81.9,-34.2,-8.2]];return e.forEach((n,r)=>{a.push(this.genEEGCoordinateStruct(n,s[r][0],s[r][1],s[r][2]))}),a}gen10_20Atlas(){let a=[],h=["FP1","FP2","FPZ","F3","F4","F7","F8","CZ","C3","C4","T3","T4","T5","T6","PZ","P3","P4","O1","O2"],i=[[-21.5,70.2,-.1],[28.4,69.1,-.4],[.6,40.9,53.9],[-35.5,49.4,32.4],[40.2,47.6,32.1],[-54.8,33.9,-3.5],[56.6,30.8,-4.1],[.8,-14.7,73.9],[-52.2,-16.4,57.8],[54.1,-18,57.5],[-70.2,-21.3,-10.7],[71.9,-25.2,-8.2],[-61.5,-65.3,1.1],[59.3,-67.6,3.8],[.2,-62.1,64.5],[-39.4,-76.3,47.4],[36.8,-74.9,49.2],[-26.8,-100.2,12.8],[24.1,-100.5,14.1]];return h.forEach((e,s)=>{a.push(this.genEEGCoordinateStruct(e,i[s][0],i[s][1],i[s][2]))}),a}genBigAtlas(){const a={FP1:[-21.2,66.9,12.1],FPZ:[1.4,65.1,11.3],FP2:[24.3,66.3,12.5],AF7:[-41.7,52.8,11.3],AF3:[-32.7,48.4,32.8],AFZ:[1.8,54.8,37.9],AF4:[35.1,50.1,31.1],AF8:[43.9,52.7,9.3],F5:[-51.4,26.7,24.7],F3:[-39.7,25.3,44.7],F1:[-22.1,26.8,54.9],FZ:[0,26.8,60.6],F2:[23.6,28.2,55.6],F4:[41.9,27.5,43.9],F6:[52.9,28.7,25.2],F7:[-52.1,28.6,3.8],F8:[53.2,28.4,3.1],FC5:[-59.1,3,26.1],FC3:[-45.5,2.4,51.3],FC1:[-24.7,.3,66.4],FCZ:[1,1,72.8],FC2:[26.1,3.2,66],FC4:[47.5,4.6,49.7],FC6:[60.5,4.9,25.5],FT9:[-53.8,-2.1,-29.1],FT7:[-59.2,3.4,-2.1],FT8:[60.2,4.7,-2.8],FT10:[55,-3.6,-31],T7:[-65.8,-17.8,-2.9],T5:[-61.5,-65.3,1.1],T3:[-70.2,-21.3,-10.7],T4:[71.9,-25.2,-8.2],T6:[59.3,-67.6,3.8],T8:[67.4,-18.5,-3.4],C5:[-63.6,-18.9,25.8],C3:[-49.1,-20.7,53.2],C1:[-25.1,-22.5,70.1],CZ:[.8,-21.9,77.4],C2:[26.7,-20.9,69.5],C4:[50.3,-18.8,53],C6:[65.2,-18,26.4],CP5:[-61.8,-46.2,22.5],CP3:[-46.9,-47.7,49.7],CP1:[-24,-49.1,66.1],CPZ:[.7,-47.9,72.6],CP2:[25.8,-47.1,66],CP4:[49.5,-45.5,50.7],CP6:[62.9,-44.6,24.4],TP9:[-73.6,-46.7,-4],TP7:[-63.6,-44.7,-4],TP8:[64.6,-45.4,-3.7],TP10:[74.6,-47.4,-3.7],P9:[-50.8,-51.3,-37.7],P7:[-55.9,-64.8,0],P5:[-52.7,-67.1,19.9],P3:[-41.4,-67.8,42.4],P1:[-21.6,-71.3,52.6],PZ:[.7,-69.3,56.9],P2:[24.4,-69.9,53.5],P4:[44.2,-65.8,42.7],P6:[54.4,-65.3,20.2],P8:[56.4,-64.4,.1],P10:[51,-53.9,-36.5],PO7:[-44,-81.7,1.6],PO3:[-33.3,-84.3,26.5],POZ:[0,-87.9,33.5],PO4:[35.2,-82.6,26.1],PO8:[43.3,-82,.7],O1:[-25.8,-93.3,7.7],Oz:[.3,-97.1,8.7],O2:[25,-95.2,6.2]};let h=[];for(const i in a)h.push(this.genEEGCoordinateStruct(i,a[i][0],a[i][1],a[i][2]));return h}genCoherenceStruct(a,h,i,e){var s={scp:[],delta:[],theta:[],alpha1:[],alpha2:[],beta:[],lowgamma:[],highgamma:[]};return{tag:a+"_"+h,x0:i==null?void 0:i.x,y0:i==null?void 0:i.y,z0:i==null?void 0:i.z,x1:e==null?void 0:e.x,y1:e==null?void 0:e.y,z1:e==null?void 0:e.z,fftCount:0,fftTimes:[],ffts:[],slices:JSON.parse(JSON.stringify(s)),means:JSON.parse(JSON.stringify(s)),lastRead:0}}genCoherenceMap(a=this.data.eegshared.eegChannelTags,h=!0){for(var i=[],e=1,s=0,n=0;n<a.length*(a.length+1)/2-a.length;n++){if(h===!1||h===!0&&a[s].tag!==null&&a[s+e].tag!==null&&a[s].tag!=="other"&&a[s+e].tag!=="other"&&a[s].analyze===!0&&a[s+e].analyze===!0){var r=this.getEEGDataByTag(a[s].tag),g=this.getEEGDataByTag(a[s+e].tag);i.push(this.genCoherenceStruct(a[s].tag,a[s+e].tag,r.position,g.position))}e++,e+s===a.length&&(s++,e=1)}return i}genHEGStruct(a,h,i,e){return{tag:a,position:{x:h,y:i,z:e},count:0,times:[],red:[],ir:[],ambient:[],ratio:[],HR:[],lastRead:0,startTime:0}}addHEGCoord(a="heg1",h,i,e){this.data.heg.push(this.genHEGStruct(a,h,i,e))}genFNIRSStruct(a,h,i,e){return{tag:a,position:{x:h,y:i,z:e},count:0,times:[],red:[],ir:[],ir2:[],ambient:[],lastRead:0}}addFNIRSCoord(a="banana1",h,i,e){this.data.fnirs.push(this.genHEGStruct(a,h,i,e))}genAccelerometerStruct(a,h,i,e){return{tag:a,position:{x:h,y:i,z:e},count:0,times:[],Ax:[],Ay:[],Az:[],Gx:[],Gy:[],Gz:[],lastRead:0,startTime:0}}addAccelerometerCoord(a="accel1",h,i,e){this.data.accelerometer.push(this.genAccelerometerStruct(a,h,i,e))}genHRVStruct(a){return{tag:a,count:0,times:[],raw:[],filtered:[],bpm:[],hrv:[],lastRead:0,startTime:0}}addHRV(a="hrv1"){this.data.hrv.push(genHRVStruct(a))}genEyeTrackerStruct(a){return{tag:a,count:0,times:[],x:[],y:[],smax:[],smay:[],lastRead:0,startTime:0}}addEyeTracker(a="eyes"){this.data.eyetracker.push(this.genEyeTrackerStruct(a))}getDeviceDataByTag(a="eeg",h="FP1"){var i=void 0;if(typeof h=="number"&&a==="eeg"){let e=this.data[a+"shared"][a+"ChannelTags"].find((s,n)=>{if(s.ch===h&&s.tag!==null)return h=s.tag,!0})}if(a.indexOf("shared")<0){let e=this.data[a].find((s,n)=>{if(s.tag===h)return i=s,!0});return i}else{if(h===null||h==="all")return this.data[a];if(typeof h=="string"||typeof h=="number"){let e=this.data[a].find((s,n)=>{if(s.tag===h)return i=s,!0});return i}else return i}}getEEGDataByChannel(a=0){let h,i=this.data.eegshared.eegChannelTags.find((e,s)=>{if(e.ch===a&&(e.tag===null||e.tag==="other"?h=this.getEEGDataByTag(e.ch):h=this.getEEGDataByTag(e.tag),h!==!1))return!0});return h}getEEGDataByTag(a="FP1"){var h=void 0;let i=this.data.eeg.find((e,s)=>{if(e.tag===a)return h=e,!0});return h}getCoherenceByTag(a="FP1_FZ"){var h=void 0;let i=this.data.coherence.find((e,s)=>{if(e.tag===a)return h=e,!0});return h}getCoordPositions(a="eeg"){for(var h=[],i=0;i<this.data[a].length;i++)h.push([this.data[a][i].position.x,this.data[a][i].position.y,this.data[a][i].position.z]);return h}getLatestFFTData(){let a=[];return this.data.eegshared.eegChannelTags.forEach((h,i)=>{if(h.analyze===!0){let e=this.getEEGDataByTag(h.tag);if(e.fftCount===0)a.push({tag:e.tag,fftCount:e.fftCount});else{let s=e.fftCount-1;a.push({tag:e.tag,fftCount:e.fftCount,time:e.fftTimes[s],fft:e.ffts[s],slice:{delta:e.slices.delta[s],theta:e.slices.theta[s],alpha1:e.slices.alpha1[s],alpha2:e.slices.alpha2[s],beta:e.slices.beta[s],lowgamma:e.slices.lowgamma[s],highgamma:e.slices.highgamma[s]},mean:{delta:e.means.delta[s],theta:e.means.theta[s],alpha1:e.means.alpha1[s],alpha2:e.means.alpha2[s],beta:e.means.beta[s],lowgamma:e.slices.lowgamma[s],highgamma:e.means.highgamma[s]}})}}}),a}getLatestCoherenceData(){let a=[];return this.data.coherence.forEach((h,i)=>{let e=h.fftCount-1;a.push({tag:h.tag,fftCount:h.fftCount,time:h.times[e],fft:h.ffts[e],slice:{delta:h.slices.delta[e],theta:h.slices.theta[e],alpha1:h.slices.alpha1[e],alpha2:h.slices.alpha2[e],beta:h.slices.beta[e],gamma:h.slices.gamma[e]},mean:{delta:h.means.delta[e],theta:h.means.theta[e],alpha1:h.means.alpha1[e],alpha2:h.means.alpha2[e],beta:h.means.beta[e],gamma:h.means.gamma[e]}})}),a}setDefaultTags(){return[{ch:0,tag:null},{ch:1,tag:null},{ch:2,tag:null},{ch:3,tag:null},{ch:4,tag:null},{ch:5,tag:null},{ch:6,tag:null},{ch:7,tag:null},{ch:8,tag:null},{ch:9,tag:null},{ch:10,tag:null},{ch:11,tag:null},{ch:12,tag:null},{ch:13,tag:null},{ch:14,tag:null},{ch:15,tag:null},{ch:16,tag:null},{ch:17,tag:null},{ch:18,tag:null},{ch:19,tag:null},{ch:20,tag:null},{ch:21,tag:null},{ch:22,tag:null},{ch:23,tag:null},{ch:24,tag:null},{ch:25,tag:null},{ch:26,tag:null},{ch:27,tag:null},{ch:28,tag:null},{ch:29,tag:null},{ch:30,tag:null},{ch:31,tag:null}]}getBandFreqs(a){var h=[[],[]],i=[[],[]],e=[[],[]],s=[[],[]],n=[[],[]],r=[[],[]],g=[[],[]],d=[[],[]];return a.forEach((l,u)=>{l>=.1&&l<=1?(h[0].push(l),h[1].push(u)):l>=1&&l<=4?(i[0].push(l),i[1].push(u)):l>4&&l<=8?(e[0].push(l),e[1].push(u)):l>8&&l<=10?(s[0].push(l),s[1].push(u)):l>10&&l<=12?(n[0].push(l),n[1].push(u)):l>12&&l<=35?(r[0].push(l),r[1].push(u)):l>35&&l<=48?(g[0].push(l),g[1].push(u)):l>48&&(d[0].push(l),d[1].push(u))}),{scp:h,delta:i,theta:e,alpha1:s,alpha2:n,beta:r,lowgamma:g,highgamma:d}}bandpassWindow(a,h,i){let e=(h-a)/i,s=[],n=0;for(;n<h;)s.push(n),n+=e;return s}toISOLocal(a){var h=n=>("0"+n).slice(-2),i=n=>("00"+n).slice(-3),e=a.getTimezoneOffset(),s=e<0?"+":"-";return e=Math.abs(e),a.getFullYear()+"-"+h(a.getMonth()+1)+"-"+h(a.getDate())+"T"+h(a.getHours())+":"+h(a.getMinutes())+":"+h(a.getSeconds())+"."+i(a.getMilliseconds())+"(UTC"+s+h(e/60|0)+":00)"}regenAtlasses(a,h,i=512){this.data.eeg=this.makeAtlas10_20();let e=this.bandPassWindow(a,h,i);this.data.eegshared.frequencies=e,this.data.eegshared.bandFreqs=this.getBandFreqs(e),this.coherenceMap=this.genCoherenceMap()}addDefaultAnalyzerFuncs(){this.analyzerOpts.push("eegfft","eegcoherence");let a=()=>{if(this.workerWaiting===!1){let i=this.bufferEEGSignals(1);i.length>0&&i[0].length>=this.data.eegshared.sps&&(window.postToWorker({foo:"multidftbandpass",input:[i,1,0,128,1],origin:this.name},this.workerIdx),this.workerWaiting=!0)}},h=()=>{if(this.workerWaiting===!1){let i=this.bufferEEGSignals(1);i.length>0&&i[0].length>=this.data.eegshared.sps&&(window.postToWorker({foo:"coherence",input:[i,1,0,128,1],origin:this.name},this.workerIdx),this.workerWaiting=!0)}};this.analyzerFuncs.push(a,h)}addAnalyzerFunc(a="",h=()=>{}){this.analyzerOpts.find((e,s)=>{if(e===e)return this.analyzerFuncs[s]=h,!0})===void 0&&(this.analyzerOpts.push(a),this.analyzerFuncs.push(h))}checkRollover(a=null){if(a===null)for(const h in this.data)Array.isArray(this.data[h])&&this.data[h].forEach((i,e)=>{for(const s in i)if(!Array.isArray(i[s])&&typeof i[s]=="object")for(const n in i[s])Array.isArray(i[s][n])&&i[s][n].length>this.rolloverLimit&&i[s][n].splice(0,Math.floor(this.rolloverLimit*.1));else Array.isArray(i[s])&&i[s].length>this.rolloverLimit&&(i[s].splice(0,Math.floor(this.rolloverLimit*.1)),s==="ffts"?(i.fftCount=i[s].length,i.lastReadFFT=i[s].length):s==="times"&&(i.count=i[s].length,i.lastRead=i[s].length))});else Array.isArray(this.data[a])&&this.data[a].forEach((h,i)=>{for(const e in h)if(!Array.isArray(h[e])&&typeof h[e]=="object")for(const s in h[e])Array.isArray(h[e][s])&&h[e][s].length>this.rolloverLimit&&h[e][s].splice(0,Math.floor(this.rolloverLimit*.1));else Array.isArray(h[e])&&h[e].length>this.rolloverLimit&&h[e].splice(0,Math.floor(this.rolloverLimit*.1))})}}
