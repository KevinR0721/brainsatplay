{"version":3,"file":"DigitalGlitch-2b3e1210.js","sources":["../../../../node_modules/three/examples/jsm/shaders/DigitalGlitch.js"],"sourcesContent":["/**\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n */\n\nvar DigitalGlitch = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null }, //diffuse texture\n\t\t'tDisp': { value: null }, //displacement texture for digital glitch squares\n\t\t'byp': { value: 0 }, //apply the glitch ?\n\t\t'amount': { value: 0.08 },\n\t\t'angle': { value: 0.02 },\n\t\t'seed': { value: 0.02 },\n\t\t'seed_x': { value: 0.02 }, //-1,1\n\t\t'seed_y': { value: 0.02 }, //-1,1\n\t\t'distortion_x': { value: 0.5 },\n\t\t'distortion_y': { value: 0.6 },\n\t\t'col_s': { value: 0.05 }\n\t},\n\n\tvertexShader: [\n\n\t\t'varying vec2 vUv;',\n\t\t'void main() {',\n\t\t'\tvUv = uv;',\n\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\t\t'}'\n\t].join( '\\n' ),\n\n\tfragmentShader: [\n\t\t'uniform int byp;', //should we apply the glitch ?\n\n\t\t'uniform sampler2D tDiffuse;',\n\t\t'uniform sampler2D tDisp;',\n\n\t\t'uniform float amount;',\n\t\t'uniform float angle;',\n\t\t'uniform float seed;',\n\t\t'uniform float seed_x;',\n\t\t'uniform float seed_y;',\n\t\t'uniform float distortion_x;',\n\t\t'uniform float distortion_y;',\n\t\t'uniform float col_s;',\n\n\t\t'varying vec2 vUv;',\n\n\n\t\t'float rand(vec2 co){',\n\t\t'\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);',\n\t\t'}',\n\n\t\t'void main() {',\n\t\t'\tif(byp<1) {',\n\t\t'\t\tvec2 p = vUv;',\n\t\t'\t\tfloat xs = floor(gl_FragCoord.x / 0.5);',\n\t\t'\t\tfloat ys = floor(gl_FragCoord.y / 0.5);',\n\t\t//based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n\t\t'\t\tvec4 normal = texture2D (tDisp, p*seed*seed);',\n\t\t'\t\tif(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {',\n\t\t'\t\t\tif(seed_x>0.){',\n\t\t'\t\t\t\tp.y = 1. - (p.y + distortion_y);',\n\t\t'\t\t\t}',\n\t\t'\t\t\telse {',\n\t\t'\t\t\t\tp.y = distortion_y;',\n\t\t'\t\t\t}',\n\t\t'\t\t}',\n\t\t'\t\tif(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {',\n\t\t'\t\t\tif(seed_y>0.){',\n\t\t'\t\t\t\tp.x=distortion_x;',\n\t\t'\t\t\t}',\n\t\t'\t\t\telse {',\n\t\t'\t\t\t\tp.x = 1. - (p.x + distortion_x);',\n\t\t'\t\t\t}',\n\t\t'\t\t}',\n\t\t'\t\tp.x+=normal.x*seed_x*(seed/5.);',\n\t\t'\t\tp.y+=normal.y*seed_y*(seed/5.);',\n\t\t//base from RGB shift shader\n\t\t'\t\tvec2 offset = amount * vec2( cos(angle), sin(angle));',\n\t\t'\t\tvec4 cr = texture2D(tDiffuse, p + offset);',\n\t\t'\t\tvec4 cga = texture2D(tDiffuse, p);',\n\t\t'\t\tvec4 cb = texture2D(tDiffuse, p - offset);',\n\t\t'\t\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);',\n\t\t//add noise\n\t\t'\t\tvec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);',\n\t\t'\t\tgl_FragColor = gl_FragColor+ snow;',\n\t\t'\t}',\n\t\t'\telse {',\n\t\t'\t\tgl_FragColor=texture2D (tDiffuse, vUv);',\n\t\t'\t}',\n\t\t'}'\n\n\t].join( '\\n' )\n\n};\n\nexport { DigitalGlitch };\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,IAAC,aAAa,GAAG;AACpB;AACA,CAAC,QAAQ,EAAE;AACX;AACA,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;AAC7B,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;AAC1B,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE;AACrB,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;AAC3B,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;AAC1B,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;AACzB,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;AAC3B,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;AAC3B,EAAE,cAAc,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE;AAChC,EAAE,cAAc,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE;AAChC,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;AAC1B,EAAE;AACF;AACA,CAAC,YAAY,EAAE;AACf;AACA,EAAE,mBAAmB;AACrB,EAAE,eAAe;AACjB,EAAE,YAAY;AACd,EAAE,4EAA4E;AAC9E,EAAE,GAAG;AACL,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE;AACf;AACA,CAAC,cAAc,EAAE;AACjB,EAAE,kBAAkB;AACpB;AACA,EAAE,6BAA6B;AAC/B,EAAE,0BAA0B;AAC5B;AACA,EAAE,uBAAuB;AACzB,EAAE,sBAAsB;AACxB,EAAE,qBAAqB;AACvB,EAAE,uBAAuB;AACzB,EAAE,uBAAuB;AACzB,EAAE,6BAA6B;AAC/B,EAAE,6BAA6B;AAC/B,EAAE,sBAAsB;AACxB;AACA,EAAE,mBAAmB;AACrB;AACA;AACA,EAAE,sBAAsB;AACxB,EAAE,oEAAoE;AACtE,EAAE,GAAG;AACL;AACA,EAAE,eAAe;AACjB,EAAE,cAAc;AAChB,EAAE,iBAAiB;AACnB,EAAE,2CAA2C;AAC7C,EAAE,2CAA2C;AAC7C;AACA,EAAE,iDAAiD;AACnD,EAAE,+DAA+D;AACjE,EAAE,mBAAmB;AACrB,EAAE,sCAAsC;AACxC,EAAE,MAAM;AACR,EAAE,WAAW;AACb,EAAE,yBAAyB;AAC3B,EAAE,MAAM;AACR,EAAE,KAAK;AACP,EAAE,+DAA+D;AACjE,EAAE,mBAAmB;AACrB,EAAE,uBAAuB;AACzB,EAAE,MAAM;AACR,EAAE,WAAW;AACb,EAAE,sCAAsC;AACxC,EAAE,MAAM;AACR,EAAE,KAAK;AACP,EAAE,mCAAmC;AACrC,EAAE,mCAAmC;AACrC;AACA,EAAE,yDAAyD;AAC3D,EAAE,8CAA8C;AAChD,EAAE,sCAAsC;AACxC,EAAE,8CAA8C;AAChD,EAAE,kDAAkD;AACpD;AACA,EAAE,0EAA0E;AAC5E,EAAE,sCAAsC;AACxC,EAAE,IAAI;AACN,EAAE,SAAS;AACX,EAAE,2CAA2C;AAC7C,EAAE,IAAI;AACN,EAAE,GAAG;AACL;AACA,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE;AACf;AACA;;;;"}